/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreContentbankRenameContent200Response } from '../model/core-contentbank-rename-content-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModChatGetChatsByCoursesRequest } from '../model/mod-chat-get-chats-by-courses-request';
import { ModGlossaryAddEntry200Response } from '../model/mod-glossary-add-entry-200-response';
import { ModGlossaryAddEntryRequest } from '../model/mod-glossary-add-entry-request';
import { ModGlossaryDeleteEntryRequest } from '../model/mod-glossary-delete-entry-request';
import { ModGlossaryGetAuthors200Response } from '../model/mod-glossary-get-authors-200-response';
import { ModGlossaryGetAuthorsRequest } from '../model/mod-glossary-get-authors-request';
import { ModGlossaryGetCategories200Response } from '../model/mod-glossary-get-categories-200-response';
import { ModGlossaryGetCategoriesRequest } from '../model/mod-glossary-get-categories-request';
import { ModGlossaryGetEntriesByAuthor200Response } from '../model/mod-glossary-get-entries-by-author-200-response';
import { ModGlossaryGetEntriesByAuthorId200Response } from '../model/mod-glossary-get-entries-by-author-id-200-response';
import { ModGlossaryGetEntriesByAuthorIdRequest } from '../model/mod-glossary-get-entries-by-author-id-request';
import { ModGlossaryGetEntriesByAuthorRequest } from '../model/mod-glossary-get-entries-by-author-request';
import { ModGlossaryGetEntriesByCategory200Response } from '../model/mod-glossary-get-entries-by-category-200-response';
import { ModGlossaryGetEntriesByCategoryRequest } from '../model/mod-glossary-get-entries-by-category-request';
import { ModGlossaryGetEntriesByDateRequest } from '../model/mod-glossary-get-entries-by-date-request';
import { ModGlossaryGetEntriesByLetterRequest } from '../model/mod-glossary-get-entries-by-letter-request';
import { ModGlossaryGetEntriesBySearchRequest } from '../model/mod-glossary-get-entries-by-search-request';
import { ModGlossaryGetEntriesByTermRequest } from '../model/mod-glossary-get-entries-by-term-request';
import { ModGlossaryGetEntriesToApproveRequest } from '../model/mod-glossary-get-entries-to-approve-request';
import { ModGlossaryGetEntryById200Response } from '../model/mod-glossary-get-entry-by-id-200-response';
import { ModGlossaryGetEntryByIdRequest } from '../model/mod-glossary-get-entry-by-id-request';
import { ModGlossaryGetGlossariesByCourses200Response } from '../model/mod-glossary-get-glossaries-by-courses-200-response';
import { ModGlossaryPrepareEntryForEdition200Response } from '../model/mod-glossary-prepare-entry-for-edition-200-response';
import { ModGlossaryPrepareEntryForEditionRequest } from '../model/mod-glossary-prepare-entry-for-edition-request';
import { ModGlossaryUpdateEntry200Response } from '../model/mod-glossary-update-entry-200-response';
import { ModGlossaryUpdateEntryRequest } from '../model/mod-glossary-update-entry-request';
import { ModGlossaryViewEntry200Response } from '../model/mod-glossary-view-entry-200-response';
import { ModGlossaryViewGlossary200Response } from '../model/mod-glossary-view-glossary-200-response';
import { ModGlossaryViewGlossaryRequest } from '../model/mod-glossary-view-glossary-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModGlossaryService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Add a new entry to a given glossary
     * Add a new entry to a given glossary
     * @param modGlossaryAddEntryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryAddEntry(modGlossaryAddEntryRequest: ModGlossaryAddEntryRequest, ): Observable<AxiosResponse<ModGlossaryAddEntry200Response>>;
    public modGlossaryAddEntry(modGlossaryAddEntryRequest: ModGlossaryAddEntryRequest, ): Observable<any> {

        if (modGlossaryAddEntryRequest === null || modGlossaryAddEntryRequest === undefined) {
            throw new Error('Required parameter modGlossaryAddEntryRequest was null or undefined when calling modGlossaryAddEntry.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryAddEntry200Response>(`${this.basePath}/mod_glossary_add_entry`,
            modGlossaryAddEntryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Delete the given entry from the glossary.
     * Delete the given entry from the glossary.
     * @param modGlossaryDeleteEntryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryDeleteEntry(modGlossaryDeleteEntryRequest: ModGlossaryDeleteEntryRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public modGlossaryDeleteEntry(modGlossaryDeleteEntryRequest: ModGlossaryDeleteEntryRequest, ): Observable<any> {

        if (modGlossaryDeleteEntryRequest === null || modGlossaryDeleteEntryRequest === undefined) {
            throw new Error('Required parameter modGlossaryDeleteEntryRequest was null or undefined when calling modGlossaryDeleteEntry.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/mod_glossary_delete_entry`,
            modGlossaryDeleteEntryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get the authors.
     * Get the authors.
     * @param modGlossaryGetAuthorsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetAuthors(modGlossaryGetAuthorsRequest: ModGlossaryGetAuthorsRequest, ): Observable<AxiosResponse<ModGlossaryGetAuthors200Response>>;
    public modGlossaryGetAuthors(modGlossaryGetAuthorsRequest: ModGlossaryGetAuthorsRequest, ): Observable<any> {

        if (modGlossaryGetAuthorsRequest === null || modGlossaryGetAuthorsRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetAuthorsRequest was null or undefined when calling modGlossaryGetAuthors.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetAuthors200Response>(`${this.basePath}/mod_glossary_get_authors`,
            modGlossaryGetAuthorsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get the categories.
     * Get the categories.
     * @param modGlossaryGetCategoriesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetCategories(modGlossaryGetCategoriesRequest: ModGlossaryGetCategoriesRequest, ): Observable<AxiosResponse<ModGlossaryGetCategories200Response>>;
    public modGlossaryGetCategories(modGlossaryGetCategoriesRequest: ModGlossaryGetCategoriesRequest, ): Observable<any> {

        if (modGlossaryGetCategoriesRequest === null || modGlossaryGetCategoriesRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetCategoriesRequest was null or undefined when calling modGlossaryGetCategories.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetCategories200Response>(`${this.basePath}/mod_glossary_get_categories`,
            modGlossaryGetCategoriesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Browse entries by author.
     * Browse entries by author.
     * @param modGlossaryGetEntriesByAuthorRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetEntriesByAuthor(modGlossaryGetEntriesByAuthorRequest: ModGlossaryGetEntriesByAuthorRequest, ): Observable<AxiosResponse<ModGlossaryGetEntriesByAuthor200Response>>;
    public modGlossaryGetEntriesByAuthor(modGlossaryGetEntriesByAuthorRequest: ModGlossaryGetEntriesByAuthorRequest, ): Observable<any> {

        if (modGlossaryGetEntriesByAuthorRequest === null || modGlossaryGetEntriesByAuthorRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntriesByAuthorRequest was null or undefined when calling modGlossaryGetEntriesByAuthor.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetEntriesByAuthor200Response>(`${this.basePath}/mod_glossary_get_entries_by_author`,
            modGlossaryGetEntriesByAuthorRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Browse entries by author ID.
     * Browse entries by author ID.
     * @param modGlossaryGetEntriesByAuthorIdRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetEntriesByAuthorId(modGlossaryGetEntriesByAuthorIdRequest: ModGlossaryGetEntriesByAuthorIdRequest, ): Observable<AxiosResponse<ModGlossaryGetEntriesByAuthorId200Response>>;
    public modGlossaryGetEntriesByAuthorId(modGlossaryGetEntriesByAuthorIdRequest: ModGlossaryGetEntriesByAuthorIdRequest, ): Observable<any> {

        if (modGlossaryGetEntriesByAuthorIdRequest === null || modGlossaryGetEntriesByAuthorIdRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntriesByAuthorIdRequest was null or undefined when calling modGlossaryGetEntriesByAuthorId.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetEntriesByAuthorId200Response>(`${this.basePath}/mod_glossary_get_entries_by_author_id`,
            modGlossaryGetEntriesByAuthorIdRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Browse entries by category.
     * Browse entries by category.
     * @param modGlossaryGetEntriesByCategoryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetEntriesByCategory(modGlossaryGetEntriesByCategoryRequest: ModGlossaryGetEntriesByCategoryRequest, ): Observable<AxiosResponse<ModGlossaryGetEntriesByCategory200Response>>;
    public modGlossaryGetEntriesByCategory(modGlossaryGetEntriesByCategoryRequest: ModGlossaryGetEntriesByCategoryRequest, ): Observable<any> {

        if (modGlossaryGetEntriesByCategoryRequest === null || modGlossaryGetEntriesByCategoryRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntriesByCategoryRequest was null or undefined when calling modGlossaryGetEntriesByCategory.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetEntriesByCategory200Response>(`${this.basePath}/mod_glossary_get_entries_by_category`,
            modGlossaryGetEntriesByCategoryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Browse entries by date.
     * Browse entries by date.
     * @param modGlossaryGetEntriesByDateRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetEntriesByDate(modGlossaryGetEntriesByDateRequest: ModGlossaryGetEntriesByDateRequest, ): Observable<AxiosResponse<ModGlossaryGetEntriesByAuthorId200Response>>;
    public modGlossaryGetEntriesByDate(modGlossaryGetEntriesByDateRequest: ModGlossaryGetEntriesByDateRequest, ): Observable<any> {

        if (modGlossaryGetEntriesByDateRequest === null || modGlossaryGetEntriesByDateRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntriesByDateRequest was null or undefined when calling modGlossaryGetEntriesByDate.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetEntriesByAuthorId200Response>(`${this.basePath}/mod_glossary_get_entries_by_date`,
            modGlossaryGetEntriesByDateRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Browse entries by letter.
     * Browse entries by letter.
     * @param modGlossaryGetEntriesByLetterRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetEntriesByLetter(modGlossaryGetEntriesByLetterRequest: ModGlossaryGetEntriesByLetterRequest, ): Observable<AxiosResponse<ModGlossaryGetEntriesByAuthorId200Response>>;
    public modGlossaryGetEntriesByLetter(modGlossaryGetEntriesByLetterRequest: ModGlossaryGetEntriesByLetterRequest, ): Observable<any> {

        if (modGlossaryGetEntriesByLetterRequest === null || modGlossaryGetEntriesByLetterRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntriesByLetterRequest was null or undefined when calling modGlossaryGetEntriesByLetter.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetEntriesByAuthorId200Response>(`${this.basePath}/mod_glossary_get_entries_by_letter`,
            modGlossaryGetEntriesByLetterRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Browse entries by search query.
     * Browse entries by search query.
     * @param modGlossaryGetEntriesBySearchRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetEntriesBySearch(modGlossaryGetEntriesBySearchRequest: ModGlossaryGetEntriesBySearchRequest, ): Observable<AxiosResponse<ModGlossaryGetEntriesByAuthorId200Response>>;
    public modGlossaryGetEntriesBySearch(modGlossaryGetEntriesBySearchRequest: ModGlossaryGetEntriesBySearchRequest, ): Observable<any> {

        if (modGlossaryGetEntriesBySearchRequest === null || modGlossaryGetEntriesBySearchRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntriesBySearchRequest was null or undefined when calling modGlossaryGetEntriesBySearch.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetEntriesByAuthorId200Response>(`${this.basePath}/mod_glossary_get_entries_by_search`,
            modGlossaryGetEntriesBySearchRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Browse entries by term (concept or alias).
     * Browse entries by term (concept or alias).
     * @param modGlossaryGetEntriesByTermRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetEntriesByTerm(modGlossaryGetEntriesByTermRequest: ModGlossaryGetEntriesByTermRequest, ): Observable<AxiosResponse<ModGlossaryGetEntriesByAuthorId200Response>>;
    public modGlossaryGetEntriesByTerm(modGlossaryGetEntriesByTermRequest: ModGlossaryGetEntriesByTermRequest, ): Observable<any> {

        if (modGlossaryGetEntriesByTermRequest === null || modGlossaryGetEntriesByTermRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntriesByTermRequest was null or undefined when calling modGlossaryGetEntriesByTerm.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetEntriesByAuthorId200Response>(`${this.basePath}/mod_glossary_get_entries_by_term`,
            modGlossaryGetEntriesByTermRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Browse entries to be approved.
     * Browse entries to be approved.
     * @param modGlossaryGetEntriesToApproveRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetEntriesToApprove(modGlossaryGetEntriesToApproveRequest: ModGlossaryGetEntriesToApproveRequest, ): Observable<AxiosResponse<ModGlossaryGetEntriesByAuthorId200Response>>;
    public modGlossaryGetEntriesToApprove(modGlossaryGetEntriesToApproveRequest: ModGlossaryGetEntriesToApproveRequest, ): Observable<any> {

        if (modGlossaryGetEntriesToApproveRequest === null || modGlossaryGetEntriesToApproveRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntriesToApproveRequest was null or undefined when calling modGlossaryGetEntriesToApprove.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetEntriesByAuthorId200Response>(`${this.basePath}/mod_glossary_get_entries_to_approve`,
            modGlossaryGetEntriesToApproveRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get an entry by ID
     * Get an entry by ID
     * @param modGlossaryGetEntryByIdRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetEntryById(modGlossaryGetEntryByIdRequest: ModGlossaryGetEntryByIdRequest, ): Observable<AxiosResponse<ModGlossaryGetEntryById200Response>>;
    public modGlossaryGetEntryById(modGlossaryGetEntryByIdRequest: ModGlossaryGetEntryByIdRequest, ): Observable<any> {

        if (modGlossaryGetEntryByIdRequest === null || modGlossaryGetEntryByIdRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntryByIdRequest was null or undefined when calling modGlossaryGetEntryById.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetEntryById200Response>(`${this.basePath}/mod_glossary_get_entry_by_id`,
            modGlossaryGetEntryByIdRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieve a list of glossaries from several courses.
     * Retrieve a list of glossaries from several courses.
     * @param modChatGetChatsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryGetGlossariesByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<AxiosResponse<ModGlossaryGetGlossariesByCourses200Response>>;
    public modGlossaryGetGlossariesByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<any> {

        if (modChatGetChatsByCoursesRequest === null || modChatGetChatsByCoursesRequest === undefined) {
            throw new Error('Required parameter modChatGetChatsByCoursesRequest was null or undefined when calling modGlossaryGetGlossariesByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryGetGlossariesByCourses200Response>(`${this.basePath}/mod_glossary_get_glossaries_by_courses`,
            modChatGetChatsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Prepares the given entry for edition returning draft item areas and file areas information.
     * Prepares the given entry for edition returning draft item areas and file areas information.
     * @param modGlossaryPrepareEntryForEditionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryPrepareEntryForEdition(modGlossaryPrepareEntryForEditionRequest: ModGlossaryPrepareEntryForEditionRequest, ): Observable<AxiosResponse<ModGlossaryPrepareEntryForEdition200Response>>;
    public modGlossaryPrepareEntryForEdition(modGlossaryPrepareEntryForEditionRequest: ModGlossaryPrepareEntryForEditionRequest, ): Observable<any> {

        if (modGlossaryPrepareEntryForEditionRequest === null || modGlossaryPrepareEntryForEditionRequest === undefined) {
            throw new Error('Required parameter modGlossaryPrepareEntryForEditionRequest was null or undefined when calling modGlossaryPrepareEntryForEdition.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryPrepareEntryForEdition200Response>(`${this.basePath}/mod_glossary_prepare_entry_for_edition`,
            modGlossaryPrepareEntryForEditionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Updates the given glossary entry.
     * Updates the given glossary entry.
     * @param modGlossaryUpdateEntryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryUpdateEntry(modGlossaryUpdateEntryRequest: ModGlossaryUpdateEntryRequest, ): Observable<AxiosResponse<ModGlossaryUpdateEntry200Response>>;
    public modGlossaryUpdateEntry(modGlossaryUpdateEntryRequest: ModGlossaryUpdateEntryRequest, ): Observable<any> {

        if (modGlossaryUpdateEntryRequest === null || modGlossaryUpdateEntryRequest === undefined) {
            throw new Error('Required parameter modGlossaryUpdateEntryRequest was null or undefined when calling modGlossaryUpdateEntry.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryUpdateEntry200Response>(`${this.basePath}/mod_glossary_update_entry`,
            modGlossaryUpdateEntryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Notify a glossary entry as being viewed.
     * Notify a glossary entry as being viewed.
     * @param modGlossaryGetEntryByIdRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryViewEntry(modGlossaryGetEntryByIdRequest: ModGlossaryGetEntryByIdRequest, ): Observable<AxiosResponse<ModGlossaryViewEntry200Response>>;
    public modGlossaryViewEntry(modGlossaryGetEntryByIdRequest: ModGlossaryGetEntryByIdRequest, ): Observable<any> {

        if (modGlossaryGetEntryByIdRequest === null || modGlossaryGetEntryByIdRequest === undefined) {
            throw new Error('Required parameter modGlossaryGetEntryByIdRequest was null or undefined when calling modGlossaryViewEntry.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryViewEntry200Response>(`${this.basePath}/mod_glossary_view_entry`,
            modGlossaryGetEntryByIdRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Notify the glossary as being viewed.
     * Notify the glossary as being viewed.
     * @param modGlossaryViewGlossaryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modGlossaryViewGlossary(modGlossaryViewGlossaryRequest: ModGlossaryViewGlossaryRequest, ): Observable<AxiosResponse<ModGlossaryViewGlossary200Response>>;
    public modGlossaryViewGlossary(modGlossaryViewGlossaryRequest: ModGlossaryViewGlossaryRequest, ): Observable<any> {

        if (modGlossaryViewGlossaryRequest === null || modGlossaryViewGlossaryRequest === undefined) {
            throw new Error('Required parameter modGlossaryViewGlossaryRequest was null or undefined when calling modGlossaryViewGlossary.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModGlossaryViewGlossary200Response>(`${this.basePath}/mod_glossary_view_glossary`,
            modGlossaryViewGlossaryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
