/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModChatGetChatsByCoursesRequest } from '../model/mod-chat-get-chats-by-courses-request';
import { ModQuizAddRandomQuestions200Response } from '../model/mod-quiz-add-random-questions-200-response';
import { ModQuizAddRandomQuestionsRequest } from '../model/mod-quiz-add-random-questions-request';
import { ModQuizGetAttemptAccessInformation200Response } from '../model/mod-quiz-get-attempt-access-information-200-response';
import { ModQuizGetAttemptAccessInformationRequest } from '../model/mod-quiz-get-attempt-access-information-request';
import { ModQuizGetAttemptData200Response } from '../model/mod-quiz-get-attempt-data-200-response';
import { ModQuizGetAttemptDataRequest } from '../model/mod-quiz-get-attempt-data-request';
import { ModQuizGetAttemptReview200Response } from '../model/mod-quiz-get-attempt-review-200-response';
import { ModQuizGetAttemptReviewRequest } from '../model/mod-quiz-get-attempt-review-request';
import { ModQuizGetAttemptSummary200Response } from '../model/mod-quiz-get-attempt-summary-200-response';
import { ModQuizGetAttemptSummaryRequest } from '../model/mod-quiz-get-attempt-summary-request';
import { ModQuizGetCombinedReviewOptions200Response } from '../model/mod-quiz-get-combined-review-options-200-response';
import { ModQuizGetCombinedReviewOptionsRequest } from '../model/mod-quiz-get-combined-review-options-request';
import { ModQuizGetQuizAccessInformation200Response } from '../model/mod-quiz-get-quiz-access-information-200-response';
import { ModQuizGetQuizAccessInformationRequest } from '../model/mod-quiz-get-quiz-access-information-request';
import { ModQuizGetQuizFeedbackForGrade200Response } from '../model/mod-quiz-get-quiz-feedback-for-grade-200-response';
import { ModQuizGetQuizFeedbackForGradeRequest } from '../model/mod-quiz-get-quiz-feedback-for-grade-request';
import { ModQuizGetQuizRequiredQtypes200Response } from '../model/mod-quiz-get-quiz-required-qtypes-200-response';
import { ModQuizGetQuizzesByCourses200Response } from '../model/mod-quiz-get-quizzes-by-courses-200-response';
import { ModQuizGetReopenAttemptConfirmationRequest } from '../model/mod-quiz-get-reopen-attempt-confirmation-request';
import { ModQuizGetUserAttempts200Response } from '../model/mod-quiz-get-user-attempts-200-response';
import { ModQuizGetUserAttemptsRequest } from '../model/mod-quiz-get-user-attempts-request';
import { ModQuizGetUserBestGrade200Response } from '../model/mod-quiz-get-user-best-grade-200-response';
import { ModQuizGetUserBestGradeRequest } from '../model/mod-quiz-get-user-best-grade-request';
import { ModQuizProcessAttempt200Response } from '../model/mod-quiz-process-attempt-200-response';
import { ModQuizProcessAttemptRequest } from '../model/mod-quiz-process-attempt-request';
import { ModQuizReopenAttemptRequest } from '../model/mod-quiz-reopen-attempt-request';
import { ModQuizSaveAttemptRequest } from '../model/mod-quiz-save-attempt-request';
import { ModQuizSetQuestionVersion200Response } from '../model/mod-quiz-set-question-version-200-response';
import { ModQuizSetQuestionVersionRequest } from '../model/mod-quiz-set-question-version-request';
import { ModQuizStartAttempt200Response } from '../model/mod-quiz-start-attempt-200-response';
import { ModQuizStartAttemptRequest } from '../model/mod-quiz-start-attempt-request';
import { ModQuizUpdateFilterConditionRequest } from '../model/mod-quiz-update-filter-condition-request';
import { ModQuizViewAttemptRequest } from '../model/mod-quiz-view-attempt-request';
import { ModQuizViewAttemptReviewRequest } from '../model/mod-quiz-view-attempt-review-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModQuizService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Add a number of random questions to a quiz.
     * Add a number of random questions to a quiz.
     * @param modQuizAddRandomQuestionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizAddRandomQuestions(modQuizAddRandomQuestionsRequest: ModQuizAddRandomQuestionsRequest, ): Observable<AxiosResponse<ModQuizAddRandomQuestions200Response>>;
    public modQuizAddRandomQuestions(modQuizAddRandomQuestionsRequest: ModQuizAddRandomQuestionsRequest, ): Observable<any> {

        if (modQuizAddRandomQuestionsRequest === null || modQuizAddRandomQuestionsRequest === undefined) {
            throw new Error('Required parameter modQuizAddRandomQuestionsRequest was null or undefined when calling modQuizAddRandomQuestions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizAddRandomQuestions200Response>(`${this.basePath}/mod_quiz_add_random_questions`,
            modQuizAddRandomQuestionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return access information for a given attempt in a quiz.
     * Return access information for a given attempt in a quiz.
     * @param modQuizGetAttemptAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetAttemptAccessInformation(modQuizGetAttemptAccessInformationRequest: ModQuizGetAttemptAccessInformationRequest, ): Observable<AxiosResponse<ModQuizGetAttemptAccessInformation200Response>>;
    public modQuizGetAttemptAccessInformation(modQuizGetAttemptAccessInformationRequest: ModQuizGetAttemptAccessInformationRequest, ): Observable<any> {

        if (modQuizGetAttemptAccessInformationRequest === null || modQuizGetAttemptAccessInformationRequest === undefined) {
            throw new Error('Required parameter modQuizGetAttemptAccessInformationRequest was null or undefined when calling modQuizGetAttemptAccessInformation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetAttemptAccessInformation200Response>(`${this.basePath}/mod_quiz_get_attempt_access_information`,
            modQuizGetAttemptAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns information for the given attempt page for a quiz attempt in progress.
     * Returns information for the given attempt page for a quiz attempt in progress.
     * @param modQuizGetAttemptDataRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetAttemptData(modQuizGetAttemptDataRequest: ModQuizGetAttemptDataRequest, ): Observable<AxiosResponse<ModQuizGetAttemptData200Response>>;
    public modQuizGetAttemptData(modQuizGetAttemptDataRequest: ModQuizGetAttemptDataRequest, ): Observable<any> {

        if (modQuizGetAttemptDataRequest === null || modQuizGetAttemptDataRequest === undefined) {
            throw new Error('Required parameter modQuizGetAttemptDataRequest was null or undefined when calling modQuizGetAttemptData.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetAttemptData200Response>(`${this.basePath}/mod_quiz_get_attempt_data`,
            modQuizGetAttemptDataRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns review information for the given finished attempt, can be used by users or teachers.
     * Returns review information for the given finished attempt, can be used by users or teachers.
     * @param modQuizGetAttemptReviewRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetAttemptReview(modQuizGetAttemptReviewRequest: ModQuizGetAttemptReviewRequest, ): Observable<AxiosResponse<ModQuizGetAttemptReview200Response>>;
    public modQuizGetAttemptReview(modQuizGetAttemptReviewRequest: ModQuizGetAttemptReviewRequest, ): Observable<any> {

        if (modQuizGetAttemptReviewRequest === null || modQuizGetAttemptReviewRequest === undefined) {
            throw new Error('Required parameter modQuizGetAttemptReviewRequest was null or undefined when calling modQuizGetAttemptReview.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetAttemptReview200Response>(`${this.basePath}/mod_quiz_get_attempt_review`,
            modQuizGetAttemptReviewRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a summary of a quiz attempt before it is submitted.
     * Returns a summary of a quiz attempt before it is submitted.
     * @param modQuizGetAttemptSummaryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetAttemptSummary(modQuizGetAttemptSummaryRequest: ModQuizGetAttemptSummaryRequest, ): Observable<AxiosResponse<ModQuizGetAttemptSummary200Response>>;
    public modQuizGetAttemptSummary(modQuizGetAttemptSummaryRequest: ModQuizGetAttemptSummaryRequest, ): Observable<any> {

        if (modQuizGetAttemptSummaryRequest === null || modQuizGetAttemptSummaryRequest === undefined) {
            throw new Error('Required parameter modQuizGetAttemptSummaryRequest was null or undefined when calling modQuizGetAttemptSummary.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetAttemptSummary200Response>(`${this.basePath}/mod_quiz_get_attempt_summary`,
            modQuizGetAttemptSummaryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Combines the review options from a number of different quiz attempts.
     * Combines the review options from a number of different quiz attempts.
     * @param modQuizGetCombinedReviewOptionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetCombinedReviewOptions(modQuizGetCombinedReviewOptionsRequest: ModQuizGetCombinedReviewOptionsRequest, ): Observable<AxiosResponse<ModQuizGetCombinedReviewOptions200Response>>;
    public modQuizGetCombinedReviewOptions(modQuizGetCombinedReviewOptionsRequest: ModQuizGetCombinedReviewOptionsRequest, ): Observable<any> {

        if (modQuizGetCombinedReviewOptionsRequest === null || modQuizGetCombinedReviewOptionsRequest === undefined) {
            throw new Error('Required parameter modQuizGetCombinedReviewOptionsRequest was null or undefined when calling modQuizGetCombinedReviewOptions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetCombinedReviewOptions200Response>(`${this.basePath}/mod_quiz_get_combined_review_options`,
            modQuizGetCombinedReviewOptionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return access information for a given quiz.
     * Return access information for a given quiz.
     * @param modQuizGetQuizAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetQuizAccessInformation(modQuizGetQuizAccessInformationRequest: ModQuizGetQuizAccessInformationRequest, ): Observable<AxiosResponse<ModQuizGetQuizAccessInformation200Response>>;
    public modQuizGetQuizAccessInformation(modQuizGetQuizAccessInformationRequest: ModQuizGetQuizAccessInformationRequest, ): Observable<any> {

        if (modQuizGetQuizAccessInformationRequest === null || modQuizGetQuizAccessInformationRequest === undefined) {
            throw new Error('Required parameter modQuizGetQuizAccessInformationRequest was null or undefined when calling modQuizGetQuizAccessInformation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetQuizAccessInformation200Response>(`${this.basePath}/mod_quiz_get_quiz_access_information`,
            modQuizGetQuizAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     * @param modQuizGetQuizFeedbackForGradeRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetQuizFeedbackForGrade(modQuizGetQuizFeedbackForGradeRequest: ModQuizGetQuizFeedbackForGradeRequest, ): Observable<AxiosResponse<ModQuizGetQuizFeedbackForGrade200Response>>;
    public modQuizGetQuizFeedbackForGrade(modQuizGetQuizFeedbackForGradeRequest: ModQuizGetQuizFeedbackForGradeRequest, ): Observable<any> {

        if (modQuizGetQuizFeedbackForGradeRequest === null || modQuizGetQuizFeedbackForGradeRequest === undefined) {
            throw new Error('Required parameter modQuizGetQuizFeedbackForGradeRequest was null or undefined when calling modQuizGetQuizFeedbackForGrade.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetQuizFeedbackForGrade200Response>(`${this.basePath}/mod_quiz_get_quiz_feedback_for_grade`,
            modQuizGetQuizFeedbackForGradeRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the potential question types that would be required for a given quiz.
     * Return the potential question types that would be required for a given quiz.
     * @param modQuizGetQuizAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetQuizRequiredQtypes(modQuizGetQuizAccessInformationRequest: ModQuizGetQuizAccessInformationRequest, ): Observable<AxiosResponse<ModQuizGetQuizRequiredQtypes200Response>>;
    public modQuizGetQuizRequiredQtypes(modQuizGetQuizAccessInformationRequest: ModQuizGetQuizAccessInformationRequest, ): Observable<any> {

        if (modQuizGetQuizAccessInformationRequest === null || modQuizGetQuizAccessInformationRequest === undefined) {
            throw new Error('Required parameter modQuizGetQuizAccessInformationRequest was null or undefined when calling modQuizGetQuizRequiredQtypes.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetQuizRequiredQtypes200Response>(`${this.basePath}/mod_quiz_get_quiz_required_qtypes`,
            modQuizGetQuizAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     * @param modChatGetChatsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetQuizzesByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<AxiosResponse<ModQuizGetQuizzesByCourses200Response>>;
    public modQuizGetQuizzesByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<any> {

        if (modChatGetChatsByCoursesRequest === null || modChatGetChatsByCoursesRequest === undefined) {
            throw new Error('Required parameter modChatGetChatsByCoursesRequest was null or undefined when calling modQuizGetQuizzesByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetQuizzesByCourses200Response>(`${this.basePath}/mod_quiz_get_quizzes_by_courses`,
            modChatGetChatsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     * @param modQuizGetReopenAttemptConfirmationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetReopenAttemptConfirmation(modQuizGetReopenAttemptConfirmationRequest: ModQuizGetReopenAttemptConfirmationRequest, ): Observable<AxiosResponse<object>>;
    public modQuizGetReopenAttemptConfirmation(modQuizGetReopenAttemptConfirmationRequest: ModQuizGetReopenAttemptConfirmationRequest, ): Observable<any> {

        if (modQuizGetReopenAttemptConfirmationRequest === null || modQuizGetReopenAttemptConfirmationRequest === undefined) {
            throw new Error('Required parameter modQuizGetReopenAttemptConfirmationRequest was null or undefined when calling modQuizGetReopenAttemptConfirmation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_quiz_get_reopen_attempt_confirmation`,
            modQuizGetReopenAttemptConfirmationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return a list of attempts for the given quiz and user.
     * Return a list of attempts for the given quiz and user.
     * @param modQuizGetUserAttemptsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetUserAttempts(modQuizGetUserAttemptsRequest: ModQuizGetUserAttemptsRequest, ): Observable<AxiosResponse<ModQuizGetUserAttempts200Response>>;
    public modQuizGetUserAttempts(modQuizGetUserAttemptsRequest: ModQuizGetUserAttemptsRequest, ): Observable<any> {

        if (modQuizGetUserAttemptsRequest === null || modQuizGetUserAttemptsRequest === undefined) {
            throw new Error('Required parameter modQuizGetUserAttemptsRequest was null or undefined when calling modQuizGetUserAttempts.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetUserAttempts200Response>(`${this.basePath}/mod_quiz_get_user_attempts`,
            modQuizGetUserAttemptsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get the best current grade for the given user on a quiz.
     * Get the best current grade for the given user on a quiz.
     * @param modQuizGetUserBestGradeRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizGetUserBestGrade(modQuizGetUserBestGradeRequest: ModQuizGetUserBestGradeRequest, ): Observable<AxiosResponse<ModQuizGetUserBestGrade200Response>>;
    public modQuizGetUserBestGrade(modQuizGetUserBestGradeRequest: ModQuizGetUserBestGradeRequest, ): Observable<any> {

        if (modQuizGetUserBestGradeRequest === null || modQuizGetUserBestGradeRequest === undefined) {
            throw new Error('Required parameter modQuizGetUserBestGradeRequest was null or undefined when calling modQuizGetUserBestGrade.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizGetUserBestGrade200Response>(`${this.basePath}/mod_quiz_get_user_best_grade`,
            modQuizGetUserBestGradeRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     * @param modQuizProcessAttemptRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizProcessAttempt(modQuizProcessAttemptRequest: ModQuizProcessAttemptRequest, ): Observable<AxiosResponse<ModQuizProcessAttempt200Response>>;
    public modQuizProcessAttempt(modQuizProcessAttemptRequest: ModQuizProcessAttemptRequest, ): Observable<any> {

        if (modQuizProcessAttemptRequest === null || modQuizProcessAttemptRequest === undefined) {
            throw new Error('Required parameter modQuizProcessAttemptRequest was null or undefined when calling modQuizProcessAttempt.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizProcessAttempt200Response>(`${this.basePath}/mod_quiz_process_attempt`,
            modQuizProcessAttemptRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Re-open an attempt that is currently in the never submitted state.
     * Re-open an attempt that is currently in the never submitted state.
     * @param modQuizReopenAttemptRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizReopenAttempt(modQuizReopenAttemptRequest: ModQuizReopenAttemptRequest, ): Observable<AxiosResponse<object>>;
    public modQuizReopenAttempt(modQuizReopenAttemptRequest: ModQuizReopenAttemptRequest, ): Observable<any> {

        if (modQuizReopenAttemptRequest === null || modQuizReopenAttemptRequest === undefined) {
            throw new Error('Required parameter modQuizReopenAttemptRequest was null or undefined when calling modQuizReopenAttempt.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_quiz_reopen_attempt`,
            modQuizReopenAttemptRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     * @param modQuizSaveAttemptRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizSaveAttempt(modQuizSaveAttemptRequest: ModQuizSaveAttemptRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modQuizSaveAttempt(modQuizSaveAttemptRequest: ModQuizSaveAttemptRequest, ): Observable<any> {

        if (modQuizSaveAttemptRequest === null || modQuizSaveAttemptRequest === undefined) {
            throw new Error('Required parameter modQuizSaveAttemptRequest was null or undefined when calling modQuizSaveAttempt.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_quiz_save_attempt`,
            modQuizSaveAttemptRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Set the version of question that would be required for a given quiz.
     * Set the version of question that would be required for a given quiz.
     * @param modQuizSetQuestionVersionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizSetQuestionVersion(modQuizSetQuestionVersionRequest: ModQuizSetQuestionVersionRequest, ): Observable<AxiosResponse<ModQuizSetQuestionVersion200Response>>;
    public modQuizSetQuestionVersion(modQuizSetQuestionVersionRequest: ModQuizSetQuestionVersionRequest, ): Observable<any> {

        if (modQuizSetQuestionVersionRequest === null || modQuizSetQuestionVersionRequest === undefined) {
            throw new Error('Required parameter modQuizSetQuestionVersionRequest was null or undefined when calling modQuizSetQuestionVersion.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizSetQuestionVersion200Response>(`${this.basePath}/mod_quiz_set_question_version`,
            modQuizSetQuestionVersionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Starts a new attempt at a quiz.
     * Starts a new attempt at a quiz.
     * @param modQuizStartAttemptRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizStartAttempt(modQuizStartAttemptRequest: ModQuizStartAttemptRequest, ): Observable<AxiosResponse<ModQuizStartAttempt200Response>>;
    public modQuizStartAttempt(modQuizStartAttemptRequest: ModQuizStartAttemptRequest, ): Observable<any> {

        if (modQuizStartAttemptRequest === null || modQuizStartAttemptRequest === undefined) {
            throw new Error('Required parameter modQuizStartAttemptRequest was null or undefined when calling modQuizStartAttempt.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizStartAttempt200Response>(`${this.basePath}/mod_quiz_start_attempt`,
            modQuizStartAttemptRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Update filter condition for a random question slot.
     * Update filter condition for a random question slot.
     * @param modQuizUpdateFilterConditionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizUpdateFilterCondition(modQuizUpdateFilterConditionRequest: ModQuizUpdateFilterConditionRequest, ): Observable<AxiosResponse<ModQuizAddRandomQuestions200Response>>;
    public modQuizUpdateFilterCondition(modQuizUpdateFilterConditionRequest: ModQuizUpdateFilterConditionRequest, ): Observable<any> {

        if (modQuizUpdateFilterConditionRequest === null || modQuizUpdateFilterConditionRequest === undefined) {
            throw new Error('Required parameter modQuizUpdateFilterConditionRequest was null or undefined when calling modQuizUpdateFilterCondition.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModQuizAddRandomQuestions200Response>(`${this.basePath}/mod_quiz_update_filter_condition`,
            modQuizUpdateFilterConditionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the attempt viewed event.
     * Trigger the attempt viewed event.
     * @param modQuizViewAttemptRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizViewAttempt(modQuizViewAttemptRequest: ModQuizViewAttemptRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modQuizViewAttempt(modQuizViewAttemptRequest: ModQuizViewAttemptRequest, ): Observable<any> {

        if (modQuizViewAttemptRequest === null || modQuizViewAttemptRequest === undefined) {
            throw new Error('Required parameter modQuizViewAttemptRequest was null or undefined when calling modQuizViewAttempt.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_quiz_view_attempt`,
            modQuizViewAttemptRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the attempt reviewed event.
     * Trigger the attempt reviewed event.
     * @param modQuizViewAttemptReviewRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizViewAttemptReview(modQuizViewAttemptReviewRequest: ModQuizViewAttemptReviewRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modQuizViewAttemptReview(modQuizViewAttemptReviewRequest: ModQuizViewAttemptReviewRequest, ): Observable<any> {

        if (modQuizViewAttemptReviewRequest === null || modQuizViewAttemptReviewRequest === undefined) {
            throw new Error('Required parameter modQuizViewAttemptReviewRequest was null or undefined when calling modQuizViewAttemptReview.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_quiz_view_attempt_review`,
            modQuizViewAttemptReviewRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the attempt summary viewed event.
     * Trigger the attempt summary viewed event.
     * @param modQuizGetAttemptSummaryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizViewAttemptSummary(modQuizGetAttemptSummaryRequest: ModQuizGetAttemptSummaryRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modQuizViewAttemptSummary(modQuizGetAttemptSummaryRequest: ModQuizGetAttemptSummaryRequest, ): Observable<any> {

        if (modQuizGetAttemptSummaryRequest === null || modQuizGetAttemptSummaryRequest === undefined) {
            throw new Error('Required parameter modQuizGetAttemptSummaryRequest was null or undefined when calling modQuizViewAttemptSummary.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_quiz_view_attempt_summary`,
            modQuizGetAttemptSummaryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modQuizGetQuizAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modQuizViewQuiz(modQuizGetQuizAccessInformationRequest: ModQuizGetQuizAccessInformationRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modQuizViewQuiz(modQuizGetQuizAccessInformationRequest: ModQuizGetQuizAccessInformationRequest, ): Observable<any> {

        if (modQuizGetQuizAccessInformationRequest === null || modQuizGetQuizAccessInformationRequest === undefined) {
            throw new Error('Required parameter modQuizGetQuizAccessInformationRequest was null or undefined when calling modQuizViewQuiz.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_quiz_view_quiz`,
            modQuizGetQuizAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
