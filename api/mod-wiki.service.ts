/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreH5pGetTrustedH5pFile200Response } from '../model/core-h5p-get-trusted-h5p-file-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModWikiEditPage200Response } from '../model/mod-wiki-edit-page-200-response';
import { ModWikiEditPageRequest } from '../model/mod-wiki-edit-page-request';
import { ModWikiGetPageContents200Response } from '../model/mod-wiki-get-page-contents-200-response';
import { ModWikiGetPageContentsRequest } from '../model/mod-wiki-get-page-contents-request';
import { ModWikiGetPageForEditing200Response } from '../model/mod-wiki-get-page-for-editing-200-response';
import { ModWikiGetPageForEditingRequest } from '../model/mod-wiki-get-page-for-editing-request';
import { ModWikiGetSubwikiFilesRequest } from '../model/mod-wiki-get-subwiki-files-request';
import { ModWikiGetSubwikiPages200Response } from '../model/mod-wiki-get-subwiki-pages-200-response';
import { ModWikiGetSubwikiPagesRequest } from '../model/mod-wiki-get-subwiki-pages-request';
import { ModWikiGetSubwikis200Response } from '../model/mod-wiki-get-subwikis-200-response';
import { ModWikiGetSubwikisRequest } from '../model/mod-wiki-get-subwikis-request';
import { ModWikiGetWikisByCourses200Response } from '../model/mod-wiki-get-wikis-by-courses-200-response';
import { ModWikiGetWikisByCoursesRequest } from '../model/mod-wiki-get-wikis-by-courses-request';
import { ModWikiNewPage200Response } from '../model/mod-wiki-new-page-200-response';
import { ModWikiNewPageRequest } from '../model/mod-wiki-new-page-request';
import { ModWikiViewPage200Response } from '../model/mod-wiki-view-page-200-response';
import { ModWikiViewPageRequest } from '../model/mod-wiki-view-page-request';
import { ModWikiViewWiki200Response } from '../model/mod-wiki-view-wiki-200-response';
import { Configuration } from '../configuration';


@Injectable()
export class ModWikiService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Save the contents of a page.
     * Save the contents of a page.
     * @param modWikiEditPageRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiEditPage(modWikiEditPageRequest: ModWikiEditPageRequest, ): Observable<AxiosResponse<ModWikiEditPage200Response>>;
    public modWikiEditPage(modWikiEditPageRequest: ModWikiEditPageRequest, ): Observable<any> {

        if (modWikiEditPageRequest === null || modWikiEditPageRequest === undefined) {
            throw new Error('Required parameter modWikiEditPageRequest was null or undefined when calling modWikiEditPage.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWikiEditPage200Response>(`${this.basePath}/mod_wiki_edit_page`,
            modWikiEditPageRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns the contents of a page.
     * Returns the contents of a page.
     * @param modWikiGetPageContentsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiGetPageContents(modWikiGetPageContentsRequest: ModWikiGetPageContentsRequest, ): Observable<AxiosResponse<ModWikiGetPageContents200Response>>;
    public modWikiGetPageContents(modWikiGetPageContentsRequest: ModWikiGetPageContentsRequest, ): Observable<any> {

        if (modWikiGetPageContentsRequest === null || modWikiGetPageContentsRequest === undefined) {
            throw new Error('Required parameter modWikiGetPageContentsRequest was null or undefined when calling modWikiGetPageContents.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWikiGetPageContents200Response>(`${this.basePath}/mod_wiki_get_page_contents`,
            modWikiGetPageContentsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Locks and retrieves info of page-section to be edited.
     * Locks and retrieves info of page-section to be edited.
     * @param modWikiGetPageForEditingRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiGetPageForEditing(modWikiGetPageForEditingRequest: ModWikiGetPageForEditingRequest, ): Observable<AxiosResponse<ModWikiGetPageForEditing200Response>>;
    public modWikiGetPageForEditing(modWikiGetPageForEditingRequest: ModWikiGetPageForEditingRequest, ): Observable<any> {

        if (modWikiGetPageForEditingRequest === null || modWikiGetPageForEditingRequest === undefined) {
            throw new Error('Required parameter modWikiGetPageForEditingRequest was null or undefined when calling modWikiGetPageForEditing.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWikiGetPageForEditing200Response>(`${this.basePath}/mod_wiki_get_page_for_editing`,
            modWikiGetPageForEditingRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns the list of files for a specific subwiki.
     * Returns the list of files for a specific subwiki.
     * @param modWikiGetSubwikiFilesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiGetSubwikiFiles(modWikiGetSubwikiFilesRequest: ModWikiGetSubwikiFilesRequest, ): Observable<AxiosResponse<CoreH5pGetTrustedH5pFile200Response>>;
    public modWikiGetSubwikiFiles(modWikiGetSubwikiFilesRequest: ModWikiGetSubwikiFilesRequest, ): Observable<any> {

        if (modWikiGetSubwikiFilesRequest === null || modWikiGetSubwikiFilesRequest === undefined) {
            throw new Error('Required parameter modWikiGetSubwikiFilesRequest was null or undefined when calling modWikiGetSubwikiFiles.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreH5pGetTrustedH5pFile200Response>(`${this.basePath}/mod_wiki_get_subwiki_files`,
            modWikiGetSubwikiFilesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns the list of pages for a specific subwiki.
     * Returns the list of pages for a specific subwiki.
     * @param modWikiGetSubwikiPagesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiGetSubwikiPages(modWikiGetSubwikiPagesRequest: ModWikiGetSubwikiPagesRequest, ): Observable<AxiosResponse<ModWikiGetSubwikiPages200Response>>;
    public modWikiGetSubwikiPages(modWikiGetSubwikiPagesRequest: ModWikiGetSubwikiPagesRequest, ): Observable<any> {

        if (modWikiGetSubwikiPagesRequest === null || modWikiGetSubwikiPagesRequest === undefined) {
            throw new Error('Required parameter modWikiGetSubwikiPagesRequest was null or undefined when calling modWikiGetSubwikiPages.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWikiGetSubwikiPages200Response>(`${this.basePath}/mod_wiki_get_subwiki_pages`,
            modWikiGetSubwikiPagesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns the list of subwikis the user can see in a specific wiki.
     * Returns the list of subwikis the user can see in a specific wiki.
     * @param modWikiGetSubwikisRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiGetSubwikis(modWikiGetSubwikisRequest: ModWikiGetSubwikisRequest, ): Observable<AxiosResponse<ModWikiGetSubwikis200Response>>;
    public modWikiGetSubwikis(modWikiGetSubwikisRequest: ModWikiGetSubwikisRequest, ): Observable<any> {

        if (modWikiGetSubwikisRequest === null || modWikiGetSubwikisRequest === undefined) {
            throw new Error('Required parameter modWikiGetSubwikisRequest was null or undefined when calling modWikiGetSubwikis.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWikiGetSubwikis200Response>(`${this.basePath}/mod_wiki_get_subwikis`,
            modWikiGetSubwikisRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     * @param modWikiGetWikisByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiGetWikisByCourses(modWikiGetWikisByCoursesRequest: ModWikiGetWikisByCoursesRequest, ): Observable<AxiosResponse<ModWikiGetWikisByCourses200Response>>;
    public modWikiGetWikisByCourses(modWikiGetWikisByCoursesRequest: ModWikiGetWikisByCoursesRequest, ): Observable<any> {

        if (modWikiGetWikisByCoursesRequest === null || modWikiGetWikisByCoursesRequest === undefined) {
            throw new Error('Required parameter modWikiGetWikisByCoursesRequest was null or undefined when calling modWikiGetWikisByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWikiGetWikisByCourses200Response>(`${this.basePath}/mod_wiki_get_wikis_by_courses`,
            modWikiGetWikisByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Create a new page in a subwiki.
     * Create a new page in a subwiki.
     * @param modWikiNewPageRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiNewPage(modWikiNewPageRequest: ModWikiNewPageRequest, ): Observable<AxiosResponse<ModWikiNewPage200Response>>;
    public modWikiNewPage(modWikiNewPageRequest: ModWikiNewPageRequest, ): Observable<any> {

        if (modWikiNewPageRequest === null || modWikiNewPageRequest === undefined) {
            throw new Error('Required parameter modWikiNewPageRequest was null or undefined when calling modWikiNewPage.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWikiNewPage200Response>(`${this.basePath}/mod_wiki_new_page`,
            modWikiNewPageRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the page viewed event and update the module completion status.
     * Trigger the page viewed event and update the module completion status.
     * @param modWikiViewPageRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiViewPage(modWikiViewPageRequest: ModWikiViewPageRequest, ): Observable<AxiosResponse<ModWikiViewPage200Response>>;
    public modWikiViewPage(modWikiViewPageRequest: ModWikiViewPageRequest, ): Observable<any> {

        if (modWikiViewPageRequest === null || modWikiViewPageRequest === undefined) {
            throw new Error('Required parameter modWikiViewPageRequest was null or undefined when calling modWikiViewPage.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWikiViewPage200Response>(`${this.basePath}/mod_wiki_view_page`,
            modWikiViewPageRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modWikiGetSubwikisRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWikiViewWiki(modWikiGetSubwikisRequest: ModWikiGetSubwikisRequest, ): Observable<AxiosResponse<ModWikiViewWiki200Response>>;
    public modWikiViewWiki(modWikiGetSubwikisRequest: ModWikiGetSubwikisRequest, ): Observable<any> {

        if (modWikiGetSubwikisRequest === null || modWikiGetSubwikisRequest === undefined) {
            throw new Error('Required parameter modWikiGetSubwikisRequest was null or undefined when calling modWikiViewWiki.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWikiViewWiki200Response>(`${this.basePath}/mod_wiki_view_wiki`,
            modWikiGetSubwikisRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
