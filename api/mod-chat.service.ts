/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModChatGetChatLatestMessages200Response } from '../model/mod-chat-get-chat-latest-messages-200-response';
import { ModChatGetChatLatestMessagesRequest } from '../model/mod-chat-get-chat-latest-messages-request';
import { ModChatGetChatUsers200Response } from '../model/mod-chat-get-chat-users-200-response';
import { ModChatGetChatUsersRequest } from '../model/mod-chat-get-chat-users-request';
import { ModChatGetChatsByCourses200Response } from '../model/mod-chat-get-chats-by-courses-200-response';
import { ModChatGetChatsByCoursesRequest } from '../model/mod-chat-get-chats-by-courses-request';
import { ModChatGetSessionMessages200Response } from '../model/mod-chat-get-session-messages-200-response';
import { ModChatGetSessionMessagesRequest } from '../model/mod-chat-get-session-messages-request';
import { ModChatGetSessions200Response } from '../model/mod-chat-get-sessions-200-response';
import { ModChatGetSessionsRequest } from '../model/mod-chat-get-sessions-request';
import { ModChatLoginUser200Response } from '../model/mod-chat-login-user-200-response';
import { ModChatLoginUserRequest } from '../model/mod-chat-login-user-request';
import { ModChatSendChatMessage200Response } from '../model/mod-chat-send-chat-message-200-response';
import { ModChatSendChatMessageRequest } from '../model/mod-chat-send-chat-message-request';
import { ModChatViewChatRequest } from '../model/mod-chat-view-chat-request';
import { ModChatViewSessionsRequest } from '../model/mod-chat-view-sessions-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModChatService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Get the latest messages from the given chat session.
     * Get the latest messages from the given chat session.
     * @param modChatGetChatLatestMessagesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChatGetChatLatestMessages(modChatGetChatLatestMessagesRequest: ModChatGetChatLatestMessagesRequest, ): Observable<AxiosResponse<ModChatGetChatLatestMessages200Response>>;
    public modChatGetChatLatestMessages(modChatGetChatLatestMessagesRequest: ModChatGetChatLatestMessagesRequest, ): Observable<any> {

        if (modChatGetChatLatestMessagesRequest === null || modChatGetChatLatestMessagesRequest === undefined) {
            throw new Error('Required parameter modChatGetChatLatestMessagesRequest was null or undefined when calling modChatGetChatLatestMessages.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChatGetChatLatestMessages200Response>(`${this.basePath}/mod_chat_get_chat_latest_messages`,
            modChatGetChatLatestMessagesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get the list of users in the given chat session.
     * Get the list of users in the given chat session.
     * @param modChatGetChatUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChatGetChatUsers(modChatGetChatUsersRequest: ModChatGetChatUsersRequest, ): Observable<AxiosResponse<ModChatGetChatUsers200Response>>;
    public modChatGetChatUsers(modChatGetChatUsersRequest: ModChatGetChatUsersRequest, ): Observable<any> {

        if (modChatGetChatUsersRequest === null || modChatGetChatUsersRequest === undefined) {
            throw new Error('Required parameter modChatGetChatUsersRequest was null or undefined when calling modChatGetChatUsers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChatGetChatUsers200Response>(`${this.basePath}/mod_chat_get_chat_users`,
            modChatGetChatUsersRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChatGetChatsByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<AxiosResponse<ModChatGetChatsByCourses200Response>>;
    public modChatGetChatsByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<any> {

        if (modChatGetChatsByCoursesRequest === null || modChatGetChatsByCoursesRequest === undefined) {
            throw new Error('Required parameter modChatGetChatsByCoursesRequest was null or undefined when calling modChatGetChatsByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChatGetChatsByCourses200Response>(`${this.basePath}/mod_chat_get_chats_by_courses`,
            modChatGetChatsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieves messages of the given chat session.
     * Retrieves messages of the given chat session.
     * @param modChatGetSessionMessagesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChatGetSessionMessages(modChatGetSessionMessagesRequest: ModChatGetSessionMessagesRequest, ): Observable<AxiosResponse<ModChatGetSessionMessages200Response>>;
    public modChatGetSessionMessages(modChatGetSessionMessagesRequest: ModChatGetSessionMessagesRequest, ): Observable<any> {

        if (modChatGetSessionMessagesRequest === null || modChatGetSessionMessagesRequest === undefined) {
            throw new Error('Required parameter modChatGetSessionMessagesRequest was null or undefined when calling modChatGetSessionMessages.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChatGetSessionMessages200Response>(`${this.basePath}/mod_chat_get_session_messages`,
            modChatGetSessionMessagesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieves chat sessions for a given chat.
     * Retrieves chat sessions for a given chat.
     * @param modChatGetSessionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChatGetSessions(modChatGetSessionsRequest: ModChatGetSessionsRequest, ): Observable<AxiosResponse<ModChatGetSessions200Response>>;
    public modChatGetSessions(modChatGetSessionsRequest: ModChatGetSessionsRequest, ): Observable<any> {

        if (modChatGetSessionsRequest === null || modChatGetSessionsRequest === undefined) {
            throw new Error('Required parameter modChatGetSessionsRequest was null or undefined when calling modChatGetSessions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChatGetSessions200Response>(`${this.basePath}/mod_chat_get_sessions`,
            modChatGetSessionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Log a user into a chat room in the given chat.
     * Log a user into a chat room in the given chat.
     * @param modChatLoginUserRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChatLoginUser(modChatLoginUserRequest: ModChatLoginUserRequest, ): Observable<AxiosResponse<ModChatLoginUser200Response>>;
    public modChatLoginUser(modChatLoginUserRequest: ModChatLoginUserRequest, ): Observable<any> {

        if (modChatLoginUserRequest === null || modChatLoginUserRequest === undefined) {
            throw new Error('Required parameter modChatLoginUserRequest was null or undefined when calling modChatLoginUser.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChatLoginUser200Response>(`${this.basePath}/mod_chat_login_user`,
            modChatLoginUserRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Send a message on the given chat session.
     * Send a message on the given chat session.
     * @param modChatSendChatMessageRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChatSendChatMessage(modChatSendChatMessageRequest: ModChatSendChatMessageRequest, ): Observable<AxiosResponse<ModChatSendChatMessage200Response>>;
    public modChatSendChatMessage(modChatSendChatMessageRequest: ModChatSendChatMessageRequest, ): Observable<any> {

        if (modChatSendChatMessageRequest === null || modChatSendChatMessageRequest === undefined) {
            throw new Error('Required parameter modChatSendChatMessageRequest was null or undefined when calling modChatSendChatMessage.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChatSendChatMessage200Response>(`${this.basePath}/mod_chat_send_chat_message`,
            modChatSendChatMessageRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modChatViewChatRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChatViewChat(modChatViewChatRequest: ModChatViewChatRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modChatViewChat(modChatViewChatRequest: ModChatViewChatRequest, ): Observable<any> {

        if (modChatViewChatRequest === null || modChatViewChatRequest === undefined) {
            throw new Error('Required parameter modChatViewChatRequest was null or undefined when calling modChatViewChat.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_chat_view_chat`,
            modChatViewChatRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the chat session viewed event.
     * Trigger the chat session viewed event.
     * @param modChatViewSessionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChatViewSessions(modChatViewSessionsRequest: ModChatViewSessionsRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modChatViewSessions(modChatViewSessionsRequest: ModChatViewSessionsRequest, ): Observable<any> {

        if (modChatViewSessionsRequest === null || modChatViewSessionsRequest === undefined) {
            throw new Error('Required parameter modChatViewSessionsRequest was null or undefined when calling modChatViewSessions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_chat_view_sessions`,
            modChatViewSessionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
