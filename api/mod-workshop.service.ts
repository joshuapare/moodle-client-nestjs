/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest } from '../model/mod-bigbluebuttonbn-get-bigbluebuttonbns-by-courses-request';
import { ModWorkshopAddSubmission200Response } from '../model/mod-workshop-add-submission-200-response';
import { ModWorkshopAddSubmissionRequest } from '../model/mod-workshop-add-submission-request';
import { ModWorkshopDeleteSubmission200Response } from '../model/mod-workshop-delete-submission-200-response';
import { ModWorkshopDeleteSubmissionRequest } from '../model/mod-workshop-delete-submission-request';
import { ModWorkshopEvaluateAssessment200Response } from '../model/mod-workshop-evaluate-assessment-200-response';
import { ModWorkshopEvaluateAssessmentRequest } from '../model/mod-workshop-evaluate-assessment-request';
import { ModWorkshopEvaluateSubmission200Response } from '../model/mod-workshop-evaluate-submission-200-response';
import { ModWorkshopEvaluateSubmissionRequest } from '../model/mod-workshop-evaluate-submission-request';
import { ModWorkshopGetAssessment200Response } from '../model/mod-workshop-get-assessment-200-response';
import { ModWorkshopGetAssessmentFormDefinition200Response } from '../model/mod-workshop-get-assessment-form-definition-200-response';
import { ModWorkshopGetAssessmentFormDefinitionRequest } from '../model/mod-workshop-get-assessment-form-definition-request';
import { ModWorkshopGetAssessmentRequest } from '../model/mod-workshop-get-assessment-request';
import { ModWorkshopGetGrades200Response } from '../model/mod-workshop-get-grades-200-response';
import { ModWorkshopGetGradesReport200Response } from '../model/mod-workshop-get-grades-report-200-response';
import { ModWorkshopGetGradesReportRequest } from '../model/mod-workshop-get-grades-report-request';
import { ModWorkshopGetGradesRequest } from '../model/mod-workshop-get-grades-request';
import { ModWorkshopGetReviewerAssessments200Response } from '../model/mod-workshop-get-reviewer-assessments-200-response';
import { ModWorkshopGetReviewerAssessmentsRequest } from '../model/mod-workshop-get-reviewer-assessments-request';
import { ModWorkshopGetSubmission200Response } from '../model/mod-workshop-get-submission-200-response';
import { ModWorkshopGetSubmissionRequest } from '../model/mod-workshop-get-submission-request';
import { ModWorkshopGetSubmissions200Response } from '../model/mod-workshop-get-submissions-200-response';
import { ModWorkshopGetSubmissionsRequest } from '../model/mod-workshop-get-submissions-request';
import { ModWorkshopGetUserPlan200Response } from '../model/mod-workshop-get-user-plan-200-response';
import { ModWorkshopGetUserPlanRequest } from '../model/mod-workshop-get-user-plan-request';
import { ModWorkshopGetWorkshopAccessInformation200Response } from '../model/mod-workshop-get-workshop-access-information-200-response';
import { ModWorkshopGetWorkshopAccessInformationRequest } from '../model/mod-workshop-get-workshop-access-information-request';
import { ModWorkshopGetWorkshopsByCourses200Response } from '../model/mod-workshop-get-workshops-by-courses-200-response';
import { ModWorkshopUpdateAssessment200Response } from '../model/mod-workshop-update-assessment-200-response';
import { ModWorkshopUpdateAssessmentRequest } from '../model/mod-workshop-update-assessment-request';
import { ModWorkshopUpdateSubmission200Response } from '../model/mod-workshop-update-submission-200-response';
import { ModWorkshopUpdateSubmissionRequest } from '../model/mod-workshop-update-submission-request';
import { ModWorkshopViewWorkshopRequest } from '../model/mod-workshop-view-workshop-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModWorkshopService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Add a new submission to a given workshop.
     * Add a new submission to a given workshop.
     * @param modWorkshopAddSubmissionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopAddSubmission(modWorkshopAddSubmissionRequest: ModWorkshopAddSubmissionRequest, ): Observable<AxiosResponse<ModWorkshopAddSubmission200Response>>;
    public modWorkshopAddSubmission(modWorkshopAddSubmissionRequest: ModWorkshopAddSubmissionRequest, ): Observable<any> {

        if (modWorkshopAddSubmissionRequest === null || modWorkshopAddSubmissionRequest === undefined) {
            throw new Error('Required parameter modWorkshopAddSubmissionRequest was null or undefined when calling modWorkshopAddSubmission.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopAddSubmission200Response>(`${this.basePath}/mod_workshop_add_submission`,
            modWorkshopAddSubmissionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Deletes the given submission.
     * Deletes the given submission.
     * @param modWorkshopDeleteSubmissionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopDeleteSubmission(modWorkshopDeleteSubmissionRequest: ModWorkshopDeleteSubmissionRequest, ): Observable<AxiosResponse<ModWorkshopDeleteSubmission200Response>>;
    public modWorkshopDeleteSubmission(modWorkshopDeleteSubmissionRequest: ModWorkshopDeleteSubmissionRequest, ): Observable<any> {

        if (modWorkshopDeleteSubmissionRequest === null || modWorkshopDeleteSubmissionRequest === undefined) {
            throw new Error('Required parameter modWorkshopDeleteSubmissionRequest was null or undefined when calling modWorkshopDeleteSubmission.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopDeleteSubmission200Response>(`${this.basePath}/mod_workshop_delete_submission`,
            modWorkshopDeleteSubmissionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     * @param modWorkshopEvaluateAssessmentRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopEvaluateAssessment(modWorkshopEvaluateAssessmentRequest: ModWorkshopEvaluateAssessmentRequest, ): Observable<AxiosResponse<ModWorkshopEvaluateAssessment200Response>>;
    public modWorkshopEvaluateAssessment(modWorkshopEvaluateAssessmentRequest: ModWorkshopEvaluateAssessmentRequest, ): Observable<any> {

        if (modWorkshopEvaluateAssessmentRequest === null || modWorkshopEvaluateAssessmentRequest === undefined) {
            throw new Error('Required parameter modWorkshopEvaluateAssessmentRequest was null or undefined when calling modWorkshopEvaluateAssessment.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopEvaluateAssessment200Response>(`${this.basePath}/mod_workshop_evaluate_assessment`,
            modWorkshopEvaluateAssessmentRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     * @param modWorkshopEvaluateSubmissionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopEvaluateSubmission(modWorkshopEvaluateSubmissionRequest: ModWorkshopEvaluateSubmissionRequest, ): Observable<AxiosResponse<ModWorkshopEvaluateSubmission200Response>>;
    public modWorkshopEvaluateSubmission(modWorkshopEvaluateSubmissionRequest: ModWorkshopEvaluateSubmissionRequest, ): Observable<any> {

        if (modWorkshopEvaluateSubmissionRequest === null || modWorkshopEvaluateSubmissionRequest === undefined) {
            throw new Error('Required parameter modWorkshopEvaluateSubmissionRequest was null or undefined when calling modWorkshopEvaluateSubmission.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopEvaluateSubmission200Response>(`${this.basePath}/mod_workshop_evaluate_submission`,
            modWorkshopEvaluateSubmissionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieves the given assessment.
     * Retrieves the given assessment.
     * @param modWorkshopGetAssessmentRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetAssessment(modWorkshopGetAssessmentRequest: ModWorkshopGetAssessmentRequest, ): Observable<AxiosResponse<ModWorkshopGetAssessment200Response>>;
    public modWorkshopGetAssessment(modWorkshopGetAssessmentRequest: ModWorkshopGetAssessmentRequest, ): Observable<any> {

        if (modWorkshopGetAssessmentRequest === null || modWorkshopGetAssessmentRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetAssessmentRequest was null or undefined when calling modWorkshopGetAssessment.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetAssessment200Response>(`${this.basePath}/mod_workshop_get_assessment`,
            modWorkshopGetAssessmentRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieves the assessment form definition.
     * Retrieves the assessment form definition.
     * @param modWorkshopGetAssessmentFormDefinitionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetAssessmentFormDefinition(modWorkshopGetAssessmentFormDefinitionRequest: ModWorkshopGetAssessmentFormDefinitionRequest, ): Observable<AxiosResponse<ModWorkshopGetAssessmentFormDefinition200Response>>;
    public modWorkshopGetAssessmentFormDefinition(modWorkshopGetAssessmentFormDefinitionRequest: ModWorkshopGetAssessmentFormDefinitionRequest, ): Observable<any> {

        if (modWorkshopGetAssessmentFormDefinitionRequest === null || modWorkshopGetAssessmentFormDefinitionRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetAssessmentFormDefinitionRequest was null or undefined when calling modWorkshopGetAssessmentFormDefinition.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetAssessmentFormDefinition200Response>(`${this.basePath}/mod_workshop_get_assessment_form_definition`,
            modWorkshopGetAssessmentFormDefinitionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns the assessment and submission grade for the given user.
     * Returns the assessment and submission grade for the given user.
     * @param modWorkshopGetGradesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetGrades(modWorkshopGetGradesRequest: ModWorkshopGetGradesRequest, ): Observable<AxiosResponse<ModWorkshopGetGrades200Response>>;
    public modWorkshopGetGrades(modWorkshopGetGradesRequest: ModWorkshopGetGradesRequest, ): Observable<any> {

        if (modWorkshopGetGradesRequest === null || modWorkshopGetGradesRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetGradesRequest was null or undefined when calling modWorkshopGetGrades.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetGrades200Response>(`${this.basePath}/mod_workshop_get_grades`,
            modWorkshopGetGradesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieves the assessment grades report.
     * Retrieves the assessment grades report.
     * @param modWorkshopGetGradesReportRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetGradesReport(modWorkshopGetGradesReportRequest: ModWorkshopGetGradesReportRequest, ): Observable<AxiosResponse<ModWorkshopGetGradesReport200Response>>;
    public modWorkshopGetGradesReport(modWorkshopGetGradesReportRequest: ModWorkshopGetGradesReportRequest, ): Observable<any> {

        if (modWorkshopGetGradesReportRequest === null || modWorkshopGetGradesReportRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetGradesReportRequest was null or undefined when calling modWorkshopGetGradesReport.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetGradesReport200Response>(`${this.basePath}/mod_workshop_get_grades_report`,
            modWorkshopGetGradesReportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieves all the assessments reviewed by the given user.
     * Retrieves all the assessments reviewed by the given user.
     * @param modWorkshopGetReviewerAssessmentsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetReviewerAssessments(modWorkshopGetReviewerAssessmentsRequest: ModWorkshopGetReviewerAssessmentsRequest, ): Observable<AxiosResponse<ModWorkshopGetReviewerAssessments200Response>>;
    public modWorkshopGetReviewerAssessments(modWorkshopGetReviewerAssessmentsRequest: ModWorkshopGetReviewerAssessmentsRequest, ): Observable<any> {

        if (modWorkshopGetReviewerAssessmentsRequest === null || modWorkshopGetReviewerAssessmentsRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetReviewerAssessmentsRequest was null or undefined when calling modWorkshopGetReviewerAssessments.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetReviewerAssessments200Response>(`${this.basePath}/mod_workshop_get_reviewer_assessments`,
            modWorkshopGetReviewerAssessmentsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieves the given submission.
     * Retrieves the given submission.
     * @param modWorkshopGetSubmissionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetSubmission(modWorkshopGetSubmissionRequest: ModWorkshopGetSubmissionRequest, ): Observable<AxiosResponse<ModWorkshopGetSubmission200Response>>;
    public modWorkshopGetSubmission(modWorkshopGetSubmissionRequest: ModWorkshopGetSubmissionRequest, ): Observable<any> {

        if (modWorkshopGetSubmissionRequest === null || modWorkshopGetSubmissionRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetSubmissionRequest was null or undefined when calling modWorkshopGetSubmission.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetSubmission200Response>(`${this.basePath}/mod_workshop_get_submission`,
            modWorkshopGetSubmissionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieves all the assessments of the given submission.
     * Retrieves all the assessments of the given submission.
     * @param modWorkshopGetSubmissionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetSubmissionAssessments(modWorkshopGetSubmissionRequest: ModWorkshopGetSubmissionRequest, ): Observable<AxiosResponse<ModWorkshopGetReviewerAssessments200Response>>;
    public modWorkshopGetSubmissionAssessments(modWorkshopGetSubmissionRequest: ModWorkshopGetSubmissionRequest, ): Observable<any> {

        if (modWorkshopGetSubmissionRequest === null || modWorkshopGetSubmissionRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetSubmissionRequest was null or undefined when calling modWorkshopGetSubmissionAssessments.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetReviewerAssessments200Response>(`${this.basePath}/mod_workshop_get_submission_assessments`,
            modWorkshopGetSubmissionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     * @param modWorkshopGetSubmissionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetSubmissions(modWorkshopGetSubmissionsRequest: ModWorkshopGetSubmissionsRequest, ): Observable<AxiosResponse<ModWorkshopGetSubmissions200Response>>;
    public modWorkshopGetSubmissions(modWorkshopGetSubmissionsRequest: ModWorkshopGetSubmissionsRequest, ): Observable<any> {

        if (modWorkshopGetSubmissionsRequest === null || modWorkshopGetSubmissionsRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetSubmissionsRequest was null or undefined when calling modWorkshopGetSubmissions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetSubmissions200Response>(`${this.basePath}/mod_workshop_get_submissions`,
            modWorkshopGetSubmissionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the planner information for the given user.
     * Return the planner information for the given user.
     * @param modWorkshopGetUserPlanRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetUserPlan(modWorkshopGetUserPlanRequest: ModWorkshopGetUserPlanRequest, ): Observable<AxiosResponse<ModWorkshopGetUserPlan200Response>>;
    public modWorkshopGetUserPlan(modWorkshopGetUserPlanRequest: ModWorkshopGetUserPlanRequest, ): Observable<any> {

        if (modWorkshopGetUserPlanRequest === null || modWorkshopGetUserPlanRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetUserPlanRequest was null or undefined when calling modWorkshopGetUserPlan.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetUserPlan200Response>(`${this.basePath}/mod_workshop_get_user_plan`,
            modWorkshopGetUserPlanRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return access information for a given workshop.
     * Return access information for a given workshop.
     * @param modWorkshopGetWorkshopAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetWorkshopAccessInformation(modWorkshopGetWorkshopAccessInformationRequest: ModWorkshopGetWorkshopAccessInformationRequest, ): Observable<AxiosResponse<ModWorkshopGetWorkshopAccessInformation200Response>>;
    public modWorkshopGetWorkshopAccessInformation(modWorkshopGetWorkshopAccessInformationRequest: ModWorkshopGetWorkshopAccessInformationRequest, ): Observable<any> {

        if (modWorkshopGetWorkshopAccessInformationRequest === null || modWorkshopGetWorkshopAccessInformationRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetWorkshopAccessInformationRequest was null or undefined when calling modWorkshopGetWorkshopAccessInformation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetWorkshopAccessInformation200Response>(`${this.basePath}/mod_workshop_get_workshop_access_information`,
            modWorkshopGetWorkshopAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopGetWorkshopsByCourses(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, ): Observable<AxiosResponse<ModWorkshopGetWorkshopsByCourses200Response>>;
    public modWorkshopGetWorkshopsByCourses(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, ): Observable<any> {

        if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest === null || modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest was null or undefined when calling modWorkshopGetWorkshopsByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopGetWorkshopsByCourses200Response>(`${this.basePath}/mod_workshop_get_workshops_by_courses`,
            modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Add information to an allocated assessment.
     * Add information to an allocated assessment.
     * @param modWorkshopUpdateAssessmentRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopUpdateAssessment(modWorkshopUpdateAssessmentRequest: ModWorkshopUpdateAssessmentRequest, ): Observable<AxiosResponse<ModWorkshopUpdateAssessment200Response>>;
    public modWorkshopUpdateAssessment(modWorkshopUpdateAssessmentRequest: ModWorkshopUpdateAssessmentRequest, ): Observable<any> {

        if (modWorkshopUpdateAssessmentRequest === null || modWorkshopUpdateAssessmentRequest === undefined) {
            throw new Error('Required parameter modWorkshopUpdateAssessmentRequest was null or undefined when calling modWorkshopUpdateAssessment.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopUpdateAssessment200Response>(`${this.basePath}/mod_workshop_update_assessment`,
            modWorkshopUpdateAssessmentRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Update the given submission.
     * Update the given submission.
     * @param modWorkshopUpdateSubmissionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopUpdateSubmission(modWorkshopUpdateSubmissionRequest: ModWorkshopUpdateSubmissionRequest, ): Observable<AxiosResponse<ModWorkshopUpdateSubmission200Response>>;
    public modWorkshopUpdateSubmission(modWorkshopUpdateSubmissionRequest: ModWorkshopUpdateSubmissionRequest, ): Observable<any> {

        if (modWorkshopUpdateSubmissionRequest === null || modWorkshopUpdateSubmissionRequest === undefined) {
            throw new Error('Required parameter modWorkshopUpdateSubmissionRequest was null or undefined when calling modWorkshopUpdateSubmission.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModWorkshopUpdateSubmission200Response>(`${this.basePath}/mod_workshop_update_submission`,
            modWorkshopUpdateSubmissionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the submission viewed event.
     * Trigger the submission viewed event.
     * @param modWorkshopGetSubmissionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopViewSubmission(modWorkshopGetSubmissionRequest: ModWorkshopGetSubmissionRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modWorkshopViewSubmission(modWorkshopGetSubmissionRequest: ModWorkshopGetSubmissionRequest, ): Observable<any> {

        if (modWorkshopGetSubmissionRequest === null || modWorkshopGetSubmissionRequest === undefined) {
            throw new Error('Required parameter modWorkshopGetSubmissionRequest was null or undefined when calling modWorkshopViewSubmission.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_workshop_view_submission`,
            modWorkshopGetSubmissionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modWorkshopViewWorkshopRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modWorkshopViewWorkshop(modWorkshopViewWorkshopRequest: ModWorkshopViewWorkshopRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modWorkshopViewWorkshop(modWorkshopViewWorkshopRequest: ModWorkshopViewWorkshopRequest, ): Observable<any> {

        if (modWorkshopViewWorkshopRequest === null || modWorkshopViewWorkshopRequest === undefined) {
            throw new Error('Required parameter modWorkshopViewWorkshopRequest was null or undefined when calling modWorkshopViewWorkshop.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_workshop_view_workshop`,
            modWorkshopViewWorkshopRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
