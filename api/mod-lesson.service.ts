/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModChatGetChatsByCoursesRequest } from '../model/mod-chat-get-chats-by-courses-request';
import { ModLessonFinishAttempt200Response } from '../model/mod-lesson-finish-attempt-200-response';
import { ModLessonFinishAttemptRequest } from '../model/mod-lesson-finish-attempt-request';
import { ModLessonGetAttemptsOverview200Response } from '../model/mod-lesson-get-attempts-overview-200-response';
import { ModLessonGetAttemptsOverviewRequest } from '../model/mod-lesson-get-attempts-overview-request';
import { ModLessonGetContentPagesViewed200Response } from '../model/mod-lesson-get-content-pages-viewed-200-response';
import { ModLessonGetContentPagesViewedRequest } from '../model/mod-lesson-get-content-pages-viewed-request';
import { ModLessonGetLesson200Response } from '../model/mod-lesson-get-lesson-200-response';
import { ModLessonGetLessonAccessInformation200Response } from '../model/mod-lesson-get-lesson-access-information-200-response';
import { ModLessonGetLessonAccessInformationRequest } from '../model/mod-lesson-get-lesson-access-information-request';
import { ModLessonGetLessonRequest } from '../model/mod-lesson-get-lesson-request';
import { ModLessonGetLessonsByCourses200Response } from '../model/mod-lesson-get-lessons-by-courses-200-response';
import { ModLessonGetPageData200Response } from '../model/mod-lesson-get-page-data-200-response';
import { ModLessonGetPageDataRequest } from '../model/mod-lesson-get-page-data-request';
import { ModLessonGetPages200Response } from '../model/mod-lesson-get-pages-200-response';
import { ModLessonGetPagesPossibleJumps200Response } from '../model/mod-lesson-get-pages-possible-jumps-200-response';
import { ModLessonGetPagesRequest } from '../model/mod-lesson-get-pages-request';
import { ModLessonGetQuestionsAttempts200Response } from '../model/mod-lesson-get-questions-attempts-200-response';
import { ModLessonGetQuestionsAttemptsRequest } from '../model/mod-lesson-get-questions-attempts-request';
import { ModLessonGetUserAttempt200Response } from '../model/mod-lesson-get-user-attempt-200-response';
import { ModLessonGetUserAttemptGrade200Response } from '../model/mod-lesson-get-user-attempt-grade-200-response';
import { ModLessonGetUserAttemptGradeRequest } from '../model/mod-lesson-get-user-attempt-grade-request';
import { ModLessonGetUserAttemptRequest } from '../model/mod-lesson-get-user-attempt-request';
import { ModLessonGetUserGrade200Response } from '../model/mod-lesson-get-user-grade-200-response';
import { ModLessonGetUserGradeRequest } from '../model/mod-lesson-get-user-grade-request';
import { ModLessonGetUserTimers200Response } from '../model/mod-lesson-get-user-timers-200-response';
import { ModLessonLaunchAttempt200Response } from '../model/mod-lesson-launch-attempt-200-response';
import { ModLessonLaunchAttemptRequest } from '../model/mod-lesson-launch-attempt-request';
import { ModLessonProcessPage200Response } from '../model/mod-lesson-process-page-200-response';
import { ModLessonProcessPageRequest } from '../model/mod-lesson-process-page-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModLessonService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Finishes the current attempt.
     * Finishes the current attempt.
     * @param modLessonFinishAttemptRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonFinishAttempt(modLessonFinishAttemptRequest: ModLessonFinishAttemptRequest, ): Observable<AxiosResponse<ModLessonFinishAttempt200Response>>;
    public modLessonFinishAttempt(modLessonFinishAttemptRequest: ModLessonFinishAttemptRequest, ): Observable<any> {

        if (modLessonFinishAttemptRequest === null || modLessonFinishAttemptRequest === undefined) {
            throw new Error('Required parameter modLessonFinishAttemptRequest was null or undefined when calling modLessonFinishAttempt.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonFinishAttempt200Response>(`${this.basePath}/mod_lesson_finish_attempt`,
            modLessonFinishAttemptRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get a list of all the attempts made by users in a lesson.
     * Get a list of all the attempts made by users in a lesson.
     * @param modLessonGetAttemptsOverviewRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetAttemptsOverview(modLessonGetAttemptsOverviewRequest: ModLessonGetAttemptsOverviewRequest, ): Observable<AxiosResponse<ModLessonGetAttemptsOverview200Response>>;
    public modLessonGetAttemptsOverview(modLessonGetAttemptsOverviewRequest: ModLessonGetAttemptsOverviewRequest, ): Observable<any> {

        if (modLessonGetAttemptsOverviewRequest === null || modLessonGetAttemptsOverviewRequest === undefined) {
            throw new Error('Required parameter modLessonGetAttemptsOverviewRequest was null or undefined when calling modLessonGetAttemptsOverview.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetAttemptsOverview200Response>(`${this.basePath}/mod_lesson_get_attempts_overview`,
            modLessonGetAttemptsOverviewRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the list of content pages viewed by a user during a lesson attempt.
     * Return the list of content pages viewed by a user during a lesson attempt.
     * @param modLessonGetContentPagesViewedRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetContentPagesViewed(modLessonGetContentPagesViewedRequest: ModLessonGetContentPagesViewedRequest, ): Observable<AxiosResponse<ModLessonGetContentPagesViewed200Response>>;
    public modLessonGetContentPagesViewed(modLessonGetContentPagesViewedRequest: ModLessonGetContentPagesViewedRequest, ): Observable<any> {

        if (modLessonGetContentPagesViewedRequest === null || modLessonGetContentPagesViewedRequest === undefined) {
            throw new Error('Required parameter modLessonGetContentPagesViewedRequest was null or undefined when calling modLessonGetContentPagesViewed.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetContentPagesViewed200Response>(`${this.basePath}/mod_lesson_get_content_pages_viewed`,
            modLessonGetContentPagesViewedRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return information of a given lesson.
     * Return information of a given lesson.
     * @param modLessonGetLessonRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetLesson(modLessonGetLessonRequest: ModLessonGetLessonRequest, ): Observable<AxiosResponse<ModLessonGetLesson200Response>>;
    public modLessonGetLesson(modLessonGetLessonRequest: ModLessonGetLessonRequest, ): Observable<any> {

        if (modLessonGetLessonRequest === null || modLessonGetLessonRequest === undefined) {
            throw new Error('Required parameter modLessonGetLessonRequest was null or undefined when calling modLessonGetLesson.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetLesson200Response>(`${this.basePath}/mod_lesson_get_lesson`,
            modLessonGetLessonRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return access information for a given lesson.
     * Return access information for a given lesson.
     * @param modLessonGetLessonAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetLessonAccessInformation(modLessonGetLessonAccessInformationRequest: ModLessonGetLessonAccessInformationRequest, ): Observable<AxiosResponse<ModLessonGetLessonAccessInformation200Response>>;
    public modLessonGetLessonAccessInformation(modLessonGetLessonAccessInformationRequest: ModLessonGetLessonAccessInformationRequest, ): Observable<any> {

        if (modLessonGetLessonAccessInformationRequest === null || modLessonGetLessonAccessInformationRequest === undefined) {
            throw new Error('Required parameter modLessonGetLessonAccessInformationRequest was null or undefined when calling modLessonGetLessonAccessInformation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetLessonAccessInformation200Response>(`${this.basePath}/mod_lesson_get_lesson_access_information`,
            modLessonGetLessonAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     * @param modChatGetChatsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetLessonsByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<AxiosResponse<ModLessonGetLessonsByCourses200Response>>;
    public modLessonGetLessonsByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<any> {

        if (modChatGetChatsByCoursesRequest === null || modChatGetChatsByCoursesRequest === undefined) {
            throw new Error('Required parameter modChatGetChatsByCoursesRequest was null or undefined when calling modLessonGetLessonsByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetLessonsByCourses200Response>(`${this.basePath}/mod_lesson_get_lessons_by_courses`,
            modChatGetChatsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return information of a given page, including its contents.
     * Return information of a given page, including its contents.
     * @param modLessonGetPageDataRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetPageData(modLessonGetPageDataRequest: ModLessonGetPageDataRequest, ): Observable<AxiosResponse<ModLessonGetPageData200Response>>;
    public modLessonGetPageData(modLessonGetPageDataRequest: ModLessonGetPageDataRequest, ): Observable<any> {

        if (modLessonGetPageDataRequest === null || modLessonGetPageDataRequest === undefined) {
            throw new Error('Required parameter modLessonGetPageDataRequest was null or undefined when calling modLessonGetPageData.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetPageData200Response>(`${this.basePath}/mod_lesson_get_page_data`,
            modLessonGetPageDataRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the list of pages in a lesson (based on the user permissions).
     * Return the list of pages in a lesson (based on the user permissions).
     * @param modLessonGetPagesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetPages(modLessonGetPagesRequest: ModLessonGetPagesRequest, ): Observable<AxiosResponse<ModLessonGetPages200Response>>;
    public modLessonGetPages(modLessonGetPagesRequest: ModLessonGetPagesRequest, ): Observable<any> {

        if (modLessonGetPagesRequest === null || modLessonGetPagesRequest === undefined) {
            throw new Error('Required parameter modLessonGetPagesRequest was null or undefined when calling modLessonGetPages.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetPages200Response>(`${this.basePath}/mod_lesson_get_pages`,
            modLessonGetPagesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return all the possible jumps for the pages in a given lesson.
     * Return all the possible jumps for the pages in a given lesson.
     * @param modLessonGetLessonAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetPagesPossibleJumps(modLessonGetLessonAccessInformationRequest: ModLessonGetLessonAccessInformationRequest, ): Observable<AxiosResponse<ModLessonGetPagesPossibleJumps200Response>>;
    public modLessonGetPagesPossibleJumps(modLessonGetLessonAccessInformationRequest: ModLessonGetLessonAccessInformationRequest, ): Observable<any> {

        if (modLessonGetLessonAccessInformationRequest === null || modLessonGetLessonAccessInformationRequest === undefined) {
            throw new Error('Required parameter modLessonGetLessonAccessInformationRequest was null or undefined when calling modLessonGetPagesPossibleJumps.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetPagesPossibleJumps200Response>(`${this.basePath}/mod_lesson_get_pages_possible_jumps`,
            modLessonGetLessonAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the list of questions attempts in a given lesson.
     * Return the list of questions attempts in a given lesson.
     * @param modLessonGetQuestionsAttemptsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetQuestionsAttempts(modLessonGetQuestionsAttemptsRequest: ModLessonGetQuestionsAttemptsRequest, ): Observable<AxiosResponse<ModLessonGetQuestionsAttempts200Response>>;
    public modLessonGetQuestionsAttempts(modLessonGetQuestionsAttemptsRequest: ModLessonGetQuestionsAttemptsRequest, ): Observable<any> {

        if (modLessonGetQuestionsAttemptsRequest === null || modLessonGetQuestionsAttemptsRequest === undefined) {
            throw new Error('Required parameter modLessonGetQuestionsAttemptsRequest was null or undefined when calling modLessonGetQuestionsAttempts.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetQuestionsAttempts200Response>(`${this.basePath}/mod_lesson_get_questions_attempts`,
            modLessonGetQuestionsAttemptsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return information about the given user attempt (including answers).
     * Return information about the given user attempt (including answers).
     * @param modLessonGetUserAttemptRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetUserAttempt(modLessonGetUserAttemptRequest: ModLessonGetUserAttemptRequest, ): Observable<AxiosResponse<ModLessonGetUserAttempt200Response>>;
    public modLessonGetUserAttempt(modLessonGetUserAttemptRequest: ModLessonGetUserAttemptRequest, ): Observable<any> {

        if (modLessonGetUserAttemptRequest === null || modLessonGetUserAttemptRequest === undefined) {
            throw new Error('Required parameter modLessonGetUserAttemptRequest was null or undefined when calling modLessonGetUserAttempt.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetUserAttempt200Response>(`${this.basePath}/mod_lesson_get_user_attempt`,
            modLessonGetUserAttemptRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return grade information in the attempt for a given user.
     * Return grade information in the attempt for a given user.
     * @param modLessonGetUserAttemptGradeRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetUserAttemptGrade(modLessonGetUserAttemptGradeRequest: ModLessonGetUserAttemptGradeRequest, ): Observable<AxiosResponse<ModLessonGetUserAttemptGrade200Response>>;
    public modLessonGetUserAttemptGrade(modLessonGetUserAttemptGradeRequest: ModLessonGetUserAttemptGradeRequest, ): Observable<any> {

        if (modLessonGetUserAttemptGradeRequest === null || modLessonGetUserAttemptGradeRequest === undefined) {
            throw new Error('Required parameter modLessonGetUserAttemptGradeRequest was null or undefined when calling modLessonGetUserAttemptGrade.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetUserAttemptGrade200Response>(`${this.basePath}/mod_lesson_get_user_attempt_grade`,
            modLessonGetUserAttemptGradeRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the final grade in the lesson for the given user.
     * Return the final grade in the lesson for the given user.
     * @param modLessonGetUserGradeRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetUserGrade(modLessonGetUserGradeRequest: ModLessonGetUserGradeRequest, ): Observable<AxiosResponse<ModLessonGetUserGrade200Response>>;
    public modLessonGetUserGrade(modLessonGetUserGradeRequest: ModLessonGetUserGradeRequest, ): Observable<any> {

        if (modLessonGetUserGradeRequest === null || modLessonGetUserGradeRequest === undefined) {
            throw new Error('Required parameter modLessonGetUserGradeRequest was null or undefined when calling modLessonGetUserGrade.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetUserGrade200Response>(`${this.basePath}/mod_lesson_get_user_grade`,
            modLessonGetUserGradeRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the timers in the current lesson for the given user.
     * Return the timers in the current lesson for the given user.
     * @param modLessonGetUserGradeRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonGetUserTimers(modLessonGetUserGradeRequest: ModLessonGetUserGradeRequest, ): Observable<AxiosResponse<ModLessonGetUserTimers200Response>>;
    public modLessonGetUserTimers(modLessonGetUserGradeRequest: ModLessonGetUserGradeRequest, ): Observable<any> {

        if (modLessonGetUserGradeRequest === null || modLessonGetUserGradeRequest === undefined) {
            throw new Error('Required parameter modLessonGetUserGradeRequest was null or undefined when calling modLessonGetUserTimers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonGetUserTimers200Response>(`${this.basePath}/mod_lesson_get_user_timers`,
            modLessonGetUserGradeRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Starts a new attempt or continues an existing one.
     * Starts a new attempt or continues an existing one.
     * @param modLessonLaunchAttemptRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonLaunchAttempt(modLessonLaunchAttemptRequest: ModLessonLaunchAttemptRequest, ): Observable<AxiosResponse<ModLessonLaunchAttempt200Response>>;
    public modLessonLaunchAttempt(modLessonLaunchAttemptRequest: ModLessonLaunchAttemptRequest, ): Observable<any> {

        if (modLessonLaunchAttemptRequest === null || modLessonLaunchAttemptRequest === undefined) {
            throw new Error('Required parameter modLessonLaunchAttemptRequest was null or undefined when calling modLessonLaunchAttempt.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonLaunchAttempt200Response>(`${this.basePath}/mod_lesson_launch_attempt`,
            modLessonLaunchAttemptRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Processes page responses.
     * Processes page responses.
     * @param modLessonProcessPageRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonProcessPage(modLessonProcessPageRequest: ModLessonProcessPageRequest, ): Observable<AxiosResponse<ModLessonProcessPage200Response>>;
    public modLessonProcessPage(modLessonProcessPageRequest: ModLessonProcessPageRequest, ): Observable<any> {

        if (modLessonProcessPageRequest === null || modLessonProcessPageRequest === undefined) {
            throw new Error('Required parameter modLessonProcessPageRequest was null or undefined when calling modLessonProcessPage.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModLessonProcessPage200Response>(`${this.basePath}/mod_lesson_process_page`,
            modLessonProcessPageRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modLessonGetLessonRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modLessonViewLesson(modLessonGetLessonRequest: ModLessonGetLessonRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modLessonViewLesson(modLessonGetLessonRequest: ModLessonGetLessonRequest, ): Observable<any> {

        if (modLessonGetLessonRequest === null || modLessonGetLessonRequest === undefined) {
            throw new Error('Required parameter modLessonGetLessonRequest was null or undefined when calling modLessonViewLesson.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_lesson_view_lesson`,
            modLessonGetLessonRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
