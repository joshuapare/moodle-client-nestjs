/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModForumAddDiscussion200Response } from '../model/mod-forum-add-discussion-200-response';
import { ModForumAddDiscussionPost200Response } from '../model/mod-forum-add-discussion-post-200-response';
import { ModForumAddDiscussionPostRequest } from '../model/mod-forum-add-discussion-post-request';
import { ModForumAddDiscussionRequest } from '../model/mod-forum-add-discussion-request';
import { ModForumCanAddDiscussion200Response } from '../model/mod-forum-can-add-discussion-200-response';
import { ModForumCanAddDiscussionRequest } from '../model/mod-forum-can-add-discussion-request';
import { ModForumDeletePost200Response } from '../model/mod-forum-delete-post-200-response';
import { ModForumDeletePostRequest } from '../model/mod-forum-delete-post-request';
import { ModForumGetDiscussionPost200Response } from '../model/mod-forum-get-discussion-post-200-response';
import { ModForumGetDiscussionPostRequest } from '../model/mod-forum-get-discussion-post-request';
import { ModForumGetDiscussionPosts200Response } from '../model/mod-forum-get-discussion-posts-200-response';
import { ModForumGetDiscussionPostsByUserid200Response } from '../model/mod-forum-get-discussion-posts-by-userid-200-response';
import { ModForumGetDiscussionPostsByUseridRequest } from '../model/mod-forum-get-discussion-posts-by-userid-request';
import { ModForumGetDiscussionPostsRequest } from '../model/mod-forum-get-discussion-posts-request';
import { ModForumGetForumAccessInformation200Response } from '../model/mod-forum-get-forum-access-information-200-response';
import { ModForumGetForumAccessInformationRequest } from '../model/mod-forum-get-forum-access-information-request';
import { ModForumGetForumDiscussions200Response } from '../model/mod-forum-get-forum-discussions-200-response';
import { ModForumGetForumDiscussionsPaginated200Response } from '../model/mod-forum-get-forum-discussions-paginated-200-response';
import { ModForumGetForumDiscussionsPaginatedRequest } from '../model/mod-forum-get-forum-discussions-paginated-request';
import { ModForumGetForumDiscussionsRequest } from '../model/mod-forum-get-forum-discussions-request';
import { ModForumGetForumsByCoursesRequest } from '../model/mod-forum-get-forums-by-courses-request';
import { ModForumPrepareDraftAreaForPost200Response } from '../model/mod-forum-prepare-draft-area-for-post-200-response';
import { ModForumPrepareDraftAreaForPostRequest } from '../model/mod-forum-prepare-draft-area-for-post-request';
import { ModForumSetLockState200Response } from '../model/mod-forum-set-lock-state-200-response';
import { ModForumSetLockStateRequest } from '../model/mod-forum-set-lock-state-request';
import { ModForumSetPinState200Response } from '../model/mod-forum-set-pin-state-200-response';
import { ModForumSetPinStateRequest } from '../model/mod-forum-set-pin-state-request';
import { ModForumSetSubscriptionState200Response } from '../model/mod-forum-set-subscription-state-200-response';
import { ModForumSetSubscriptionStateRequest } from '../model/mod-forum-set-subscription-state-request';
import { ModForumToggleFavouriteStateRequest } from '../model/mod-forum-toggle-favourite-state-request';
import { ModForumUpdateDiscussionPost200Response } from '../model/mod-forum-update-discussion-post-200-response';
import { ModForumUpdateDiscussionPostRequest } from '../model/mod-forum-update-discussion-post-request';
import { ModForumViewForumDiscussionRequest } from '../model/mod-forum-view-forum-discussion-request';
import { ModForumViewForumRequest } from '../model/mod-forum-view-forum-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModForumService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Add a new discussion into an existing forum.
     * Add a new discussion into an existing forum.
     * @param modForumAddDiscussionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumAddDiscussion(modForumAddDiscussionRequest: ModForumAddDiscussionRequest, ): Observable<AxiosResponse<ModForumAddDiscussion200Response>>;
    public modForumAddDiscussion(modForumAddDiscussionRequest: ModForumAddDiscussionRequest, ): Observable<any> {

        if (modForumAddDiscussionRequest === null || modForumAddDiscussionRequest === undefined) {
            throw new Error('Required parameter modForumAddDiscussionRequest was null or undefined when calling modForumAddDiscussion.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumAddDiscussion200Response>(`${this.basePath}/mod_forum_add_discussion`,
            modForumAddDiscussionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Create new posts into an existing discussion.
     * Create new posts into an existing discussion.
     * @param modForumAddDiscussionPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumAddDiscussionPost(modForumAddDiscussionPostRequest: ModForumAddDiscussionPostRequest, ): Observable<AxiosResponse<ModForumAddDiscussionPost200Response>>;
    public modForumAddDiscussionPost(modForumAddDiscussionPostRequest: ModForumAddDiscussionPostRequest, ): Observable<any> {

        if (modForumAddDiscussionPostRequest === null || modForumAddDiscussionPostRequest === undefined) {
            throw new Error('Required parameter modForumAddDiscussionPostRequest was null or undefined when calling modForumAddDiscussionPost.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumAddDiscussionPost200Response>(`${this.basePath}/mod_forum_add_discussion_post`,
            modForumAddDiscussionPostRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     * @param modForumCanAddDiscussionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumCanAddDiscussion(modForumCanAddDiscussionRequest: ModForumCanAddDiscussionRequest, ): Observable<AxiosResponse<ModForumCanAddDiscussion200Response>>;
    public modForumCanAddDiscussion(modForumCanAddDiscussionRequest: ModForumCanAddDiscussionRequest, ): Observable<any> {

        if (modForumCanAddDiscussionRequest === null || modForumCanAddDiscussionRequest === undefined) {
            throw new Error('Required parameter modForumCanAddDiscussionRequest was null or undefined when calling modForumCanAddDiscussion.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumCanAddDiscussion200Response>(`${this.basePath}/mod_forum_can_add_discussion`,
            modForumCanAddDiscussionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Deletes a post or a discussion completely when the post is the discussion topic.
     * Deletes a post or a discussion completely when the post is the discussion topic.
     * @param modForumDeletePostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumDeletePost(modForumDeletePostRequest: ModForumDeletePostRequest, ): Observable<AxiosResponse<ModForumDeletePost200Response>>;
    public modForumDeletePost(modForumDeletePostRequest: ModForumDeletePostRequest, ): Observable<any> {

        if (modForumDeletePostRequest === null || modForumDeletePostRequest === undefined) {
            throw new Error('Required parameter modForumDeletePostRequest was null or undefined when calling modForumDeletePost.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumDeletePost200Response>(`${this.basePath}/mod_forum_delete_post`,
            modForumDeletePostRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get a particular discussion post.
     * Get a particular discussion post.
     * @param modForumGetDiscussionPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumGetDiscussionPost(modForumGetDiscussionPostRequest: ModForumGetDiscussionPostRequest, ): Observable<AxiosResponse<ModForumGetDiscussionPost200Response>>;
    public modForumGetDiscussionPost(modForumGetDiscussionPostRequest: ModForumGetDiscussionPostRequest, ): Observable<any> {

        if (modForumGetDiscussionPostRequest === null || modForumGetDiscussionPostRequest === undefined) {
            throw new Error('Required parameter modForumGetDiscussionPostRequest was null or undefined when calling modForumGetDiscussionPost.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumGetDiscussionPost200Response>(`${this.basePath}/mod_forum_get_discussion_post`,
            modForumGetDiscussionPostRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of forum posts for a discussion.
     * Returns a list of forum posts for a discussion.
     * @param modForumGetDiscussionPostsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumGetDiscussionPosts(modForumGetDiscussionPostsRequest: ModForumGetDiscussionPostsRequest, ): Observable<AxiosResponse<ModForumGetDiscussionPosts200Response>>;
    public modForumGetDiscussionPosts(modForumGetDiscussionPostsRequest: ModForumGetDiscussionPostsRequest, ): Observable<any> {

        if (modForumGetDiscussionPostsRequest === null || modForumGetDiscussionPostsRequest === undefined) {
            throw new Error('Required parameter modForumGetDiscussionPostsRequest was null or undefined when calling modForumGetDiscussionPosts.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumGetDiscussionPosts200Response>(`${this.basePath}/mod_forum_get_discussion_posts`,
            modForumGetDiscussionPostsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of forum posts for a discussion for a user.
     * Returns a list of forum posts for a discussion for a user.
     * @param modForumGetDiscussionPostsByUseridRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumGetDiscussionPostsByUserid(modForumGetDiscussionPostsByUseridRequest: ModForumGetDiscussionPostsByUseridRequest, ): Observable<AxiosResponse<ModForumGetDiscussionPostsByUserid200Response>>;
    public modForumGetDiscussionPostsByUserid(modForumGetDiscussionPostsByUseridRequest: ModForumGetDiscussionPostsByUseridRequest, ): Observable<any> {

        if (modForumGetDiscussionPostsByUseridRequest === null || modForumGetDiscussionPostsByUseridRequest === undefined) {
            throw new Error('Required parameter modForumGetDiscussionPostsByUseridRequest was null or undefined when calling modForumGetDiscussionPostsByUserid.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumGetDiscussionPostsByUserid200Response>(`${this.basePath}/mod_forum_get_discussion_posts_by_userid`,
            modForumGetDiscussionPostsByUseridRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return capabilities information for a given forum.
     * Return capabilities information for a given forum.
     * @param modForumGetForumAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumGetForumAccessInformation(modForumGetForumAccessInformationRequest: ModForumGetForumAccessInformationRequest, ): Observable<AxiosResponse<ModForumGetForumAccessInformation200Response>>;
    public modForumGetForumAccessInformation(modForumGetForumAccessInformationRequest: ModForumGetForumAccessInformationRequest, ): Observable<any> {

        if (modForumGetForumAccessInformationRequest === null || modForumGetForumAccessInformationRequest === undefined) {
            throw new Error('Required parameter modForumGetForumAccessInformationRequest was null or undefined when calling modForumGetForumAccessInformation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumGetForumAccessInformation200Response>(`${this.basePath}/mod_forum_get_forum_access_information`,
            modForumGetForumAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of forum discussions optionally sorted and paginated.
     * Returns a list of forum discussions optionally sorted and paginated.
     * @param modForumGetForumDiscussionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumGetForumDiscussions(modForumGetForumDiscussionsRequest: ModForumGetForumDiscussionsRequest, ): Observable<AxiosResponse<ModForumGetForumDiscussions200Response>>;
    public modForumGetForumDiscussions(modForumGetForumDiscussionsRequest: ModForumGetForumDiscussionsRequest, ): Observable<any> {

        if (modForumGetForumDiscussionsRequest === null || modForumGetForumDiscussionsRequest === undefined) {
            throw new Error('Required parameter modForumGetForumDiscussionsRequest was null or undefined when calling modForumGetForumDiscussions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumGetForumDiscussions200Response>(`${this.basePath}/mod_forum_get_forum_discussions`,
            modForumGetForumDiscussionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     * @param modForumGetForumDiscussionsPaginatedRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumGetForumDiscussionsPaginated(modForumGetForumDiscussionsPaginatedRequest: ModForumGetForumDiscussionsPaginatedRequest, ): Observable<AxiosResponse<ModForumGetForumDiscussionsPaginated200Response>>;
    public modForumGetForumDiscussionsPaginated(modForumGetForumDiscussionsPaginatedRequest: ModForumGetForumDiscussionsPaginatedRequest, ): Observable<any> {

        if (modForumGetForumDiscussionsPaginatedRequest === null || modForumGetForumDiscussionsPaginatedRequest === undefined) {
            throw new Error('Required parameter modForumGetForumDiscussionsPaginatedRequest was null or undefined when calling modForumGetForumDiscussionsPaginated.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumGetForumDiscussionsPaginated200Response>(`${this.basePath}/mod_forum_get_forum_discussions_paginated`,
            modForumGetForumDiscussionsPaginatedRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     * @param modForumGetForumsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumGetForumsByCourses(modForumGetForumsByCoursesRequest: ModForumGetForumsByCoursesRequest, ): Observable<AxiosResponse<object>>;
    public modForumGetForumsByCourses(modForumGetForumsByCoursesRequest: ModForumGetForumsByCoursesRequest, ): Observable<any> {

        if (modForumGetForumsByCoursesRequest === null || modForumGetForumsByCoursesRequest === undefined) {
            throw new Error('Required parameter modForumGetForumsByCoursesRequest was null or undefined when calling modForumGetForumsByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_forum_get_forums_by_courses`,
            modForumGetForumsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Prepares a draft area for editing a post.
     * Prepares a draft area for editing a post.
     * @param modForumPrepareDraftAreaForPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumPrepareDraftAreaForPost(modForumPrepareDraftAreaForPostRequest: ModForumPrepareDraftAreaForPostRequest, ): Observable<AxiosResponse<ModForumPrepareDraftAreaForPost200Response>>;
    public modForumPrepareDraftAreaForPost(modForumPrepareDraftAreaForPostRequest: ModForumPrepareDraftAreaForPostRequest, ): Observable<any> {

        if (modForumPrepareDraftAreaForPostRequest === null || modForumPrepareDraftAreaForPostRequest === undefined) {
            throw new Error('Required parameter modForumPrepareDraftAreaForPostRequest was null or undefined when calling modForumPrepareDraftAreaForPost.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumPrepareDraftAreaForPost200Response>(`${this.basePath}/mod_forum_prepare_draft_area_for_post`,
            modForumPrepareDraftAreaForPostRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Set the lock state for the discussion
     * Set the lock state for the discussion
     * @param modForumSetLockStateRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumSetLockState(modForumSetLockStateRequest: ModForumSetLockStateRequest, ): Observable<AxiosResponse<ModForumSetLockState200Response>>;
    public modForumSetLockState(modForumSetLockStateRequest: ModForumSetLockStateRequest, ): Observable<any> {

        if (modForumSetLockStateRequest === null || modForumSetLockStateRequest === undefined) {
            throw new Error('Required parameter modForumSetLockStateRequest was null or undefined when calling modForumSetLockState.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumSetLockState200Response>(`${this.basePath}/mod_forum_set_lock_state`,
            modForumSetLockStateRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Set the pin state
     * Set the pin state
     * @param modForumSetPinStateRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumSetPinState(modForumSetPinStateRequest: ModForumSetPinStateRequest, ): Observable<AxiosResponse<ModForumSetPinState200Response>>;
    public modForumSetPinState(modForumSetPinStateRequest: ModForumSetPinStateRequest, ): Observable<any> {

        if (modForumSetPinStateRequest === null || modForumSetPinStateRequest === undefined) {
            throw new Error('Required parameter modForumSetPinStateRequest was null or undefined when calling modForumSetPinState.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumSetPinState200Response>(`${this.basePath}/mod_forum_set_pin_state`,
            modForumSetPinStateRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Set the subscription state
     * Set the subscription state
     * @param modForumSetSubscriptionStateRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumSetSubscriptionState(modForumSetSubscriptionStateRequest: ModForumSetSubscriptionStateRequest, ): Observable<AxiosResponse<ModForumSetSubscriptionState200Response>>;
    public modForumSetSubscriptionState(modForumSetSubscriptionStateRequest: ModForumSetSubscriptionStateRequest, ): Observable<any> {

        if (modForumSetSubscriptionStateRequest === null || modForumSetSubscriptionStateRequest === undefined) {
            throw new Error('Required parameter modForumSetSubscriptionStateRequest was null or undefined when calling modForumSetSubscriptionState.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumSetSubscriptionState200Response>(`${this.basePath}/mod_forum_set_subscription_state`,
            modForumSetSubscriptionStateRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Toggle the favourite state
     * Toggle the favourite state
     * @param modForumToggleFavouriteStateRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumToggleFavouriteState(modForumToggleFavouriteStateRequest: ModForumToggleFavouriteStateRequest, ): Observable<AxiosResponse<ModForumSetSubscriptionState200Response>>;
    public modForumToggleFavouriteState(modForumToggleFavouriteStateRequest: ModForumToggleFavouriteStateRequest, ): Observable<any> {

        if (modForumToggleFavouriteStateRequest === null || modForumToggleFavouriteStateRequest === undefined) {
            throw new Error('Required parameter modForumToggleFavouriteStateRequest was null or undefined when calling modForumToggleFavouriteState.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumSetSubscriptionState200Response>(`${this.basePath}/mod_forum_toggle_favourite_state`,
            modForumToggleFavouriteStateRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Updates a post or a discussion topic post.
     * Updates a post or a discussion topic post.
     * @param modForumUpdateDiscussionPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumUpdateDiscussionPost(modForumUpdateDiscussionPostRequest: ModForumUpdateDiscussionPostRequest, ): Observable<AxiosResponse<ModForumUpdateDiscussionPost200Response>>;
    public modForumUpdateDiscussionPost(modForumUpdateDiscussionPostRequest: ModForumUpdateDiscussionPostRequest, ): Observable<any> {

        if (modForumUpdateDiscussionPostRequest === null || modForumUpdateDiscussionPostRequest === undefined) {
            throw new Error('Required parameter modForumUpdateDiscussionPostRequest was null or undefined when calling modForumUpdateDiscussionPost.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModForumUpdateDiscussionPost200Response>(`${this.basePath}/mod_forum_update_discussion_post`,
            modForumUpdateDiscussionPostRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modForumViewForumRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumViewForum(modForumViewForumRequest: ModForumViewForumRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modForumViewForum(modForumViewForumRequest: ModForumViewForumRequest, ): Observable<any> {

        if (modForumViewForumRequest === null || modForumViewForumRequest === undefined) {
            throw new Error('Required parameter modForumViewForumRequest was null or undefined when calling modForumViewForum.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_forum_view_forum`,
            modForumViewForumRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the forum discussion viewed event.
     * Trigger the forum discussion viewed event.
     * @param modForumViewForumDiscussionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modForumViewForumDiscussion(modForumViewForumDiscussionRequest: ModForumViewForumDiscussionRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modForumViewForumDiscussion(modForumViewForumDiscussionRequest: ModForumViewForumDiscussionRequest, ): Observable<any> {

        if (modForumViewForumDiscussionRequest === null || modForumViewForumDiscussionRequest === undefined) {
            throw new Error('Required parameter modForumViewForumDiscussionRequest was null or undefined when calling modForumViewForumDiscussion.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_forum_view_forum_discussion`,
            modForumViewForumDiscussionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
