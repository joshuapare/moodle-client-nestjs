/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { ErrorResponse } from '../model/error-response';
import { QuizaccessSebValidateQuizKeys200Response } from '../model/quizaccess-seb-validate-quiz-keys-200-response';
import { QuizaccessSebValidateQuizKeysRequest } from '../model/quizaccess-seb-validate-quiz-keys-request';
import { Configuration } from '../configuration';


@Injectable()
export class QuizaccessSebService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Validate a Safe Exam Browser config key or a browser exam key.
     * Validate a Safe Exam Browser config key or a browser exam key.
     * @param quizaccessSebValidateQuizKeysRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quizaccessSebValidateQuizKeys(quizaccessSebValidateQuizKeysRequest: QuizaccessSebValidateQuizKeysRequest, ): Observable<AxiosResponse<QuizaccessSebValidateQuizKeys200Response>>;
    public quizaccessSebValidateQuizKeys(quizaccessSebValidateQuizKeysRequest: QuizaccessSebValidateQuizKeysRequest, ): Observable<any> {

        if (quizaccessSebValidateQuizKeysRequest === null || quizaccessSebValidateQuizKeysRequest === undefined) {
            throw new Error('Required parameter quizaccessSebValidateQuizKeysRequest was null or undefined when calling quizaccessSebValidateQuizKeys.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<QuizaccessSebValidateQuizKeys200Response>(`${this.basePath}/quizaccess_seb_validate_quiz_keys`,
            quizaccessSebValidateQuizKeysRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
