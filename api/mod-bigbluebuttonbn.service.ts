/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { CoreCohortAddCohortMembers200Response } from '../model/core-cohort-add-cohort-members-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModBigbluebuttonbnCanJoin200Response } from '../model/mod-bigbluebuttonbn-can-join-200-response';
import { ModBigbluebuttonbnCanJoinRequest } from '../model/mod-bigbluebuttonbn-can-join-request';
import { ModBigbluebuttonbnCompletionValidateRequest } from '../model/mod-bigbluebuttonbn-completion-validate-request';
import { ModBigbluebuttonbnEndMeetingRequest } from '../model/mod-bigbluebuttonbn-end-meeting-request';
import { ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response } from '../model/mod-bigbluebuttonbn-get-bigbluebuttonbns-by-courses-200-response';
import { ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest } from '../model/mod-bigbluebuttonbn-get-bigbluebuttonbns-by-courses-request';
import { ModBigbluebuttonbnGetJoinUrl200Response } from '../model/mod-bigbluebuttonbn-get-join-url-200-response';
import { ModBigbluebuttonbnGetRecordings200Response } from '../model/mod-bigbluebuttonbn-get-recordings-200-response';
import { ModBigbluebuttonbnGetRecordingsRequest } from '../model/mod-bigbluebuttonbn-get-recordings-request';
import { ModBigbluebuttonbnGetRecordingsToImport200Response } from '../model/mod-bigbluebuttonbn-get-recordings-to-import-200-response';
import { ModBigbluebuttonbnGetRecordingsToImportRequest } from '../model/mod-bigbluebuttonbn-get-recordings-to-import-request';
import { ModBigbluebuttonbnMeetingInfo200Response } from '../model/mod-bigbluebuttonbn-meeting-info-200-response';
import { ModBigbluebuttonbnMeetingInfoRequest } from '../model/mod-bigbluebuttonbn-meeting-info-request';
import { ModBigbluebuttonbnUpdateRecordingRequest } from '../model/mod-bigbluebuttonbn-update-recording-request';
import { ModBigbluebuttonbnViewBigbluebuttonbnRequest } from '../model/mod-bigbluebuttonbn-view-bigbluebuttonbn-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModBigbluebuttonbnService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Returns information if the current user can join or not.
     * Returns information if the current user can join or not.
     * @param modBigbluebuttonbnCanJoinRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnCanJoin(modBigbluebuttonbnCanJoinRequest: ModBigbluebuttonbnCanJoinRequest, ): Observable<AxiosResponse<ModBigbluebuttonbnCanJoin200Response>>;
    public modBigbluebuttonbnCanJoin(modBigbluebuttonbnCanJoinRequest: ModBigbluebuttonbnCanJoinRequest, ): Observable<any> {

        if (modBigbluebuttonbnCanJoinRequest === null || modBigbluebuttonbnCanJoinRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnCanJoinRequest was null or undefined when calling modBigbluebuttonbnCanJoin.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModBigbluebuttonbnCanJoin200Response>(`${this.basePath}/mod_bigbluebuttonbn_can_join`,
            modBigbluebuttonbnCanJoinRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Validate completion
     * Validate completion
     * @param modBigbluebuttonbnCompletionValidateRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnCompletionValidate(modBigbluebuttonbnCompletionValidateRequest: ModBigbluebuttonbnCompletionValidateRequest, ): Observable<AxiosResponse<CoreCohortAddCohortMembers200Response>>;
    public modBigbluebuttonbnCompletionValidate(modBigbluebuttonbnCompletionValidateRequest: ModBigbluebuttonbnCompletionValidateRequest, ): Observable<any> {

        if (modBigbluebuttonbnCompletionValidateRequest === null || modBigbluebuttonbnCompletionValidateRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnCompletionValidateRequest was null or undefined when calling modBigbluebuttonbnCompletionValidate.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCohortAddCohortMembers200Response>(`${this.basePath}/mod_bigbluebuttonbn_completion_validate`,
            modBigbluebuttonbnCompletionValidateRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * End a meeting
     * End a meeting
     * @param modBigbluebuttonbnEndMeetingRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnEndMeeting(modBigbluebuttonbnEndMeetingRequest: ModBigbluebuttonbnEndMeetingRequest, ): Observable<AxiosResponse<CoreCohortAddCohortMembers200Response>>;
    public modBigbluebuttonbnEndMeeting(modBigbluebuttonbnEndMeetingRequest: ModBigbluebuttonbnEndMeetingRequest, ): Observable<any> {

        if (modBigbluebuttonbnEndMeetingRequest === null || modBigbluebuttonbnEndMeetingRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnEndMeetingRequest was null or undefined when calling modBigbluebuttonbnEndMeeting.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCohortAddCohortMembers200Response>(`${this.basePath}/mod_bigbluebuttonbn_end_meeting`,
            modBigbluebuttonbnEndMeetingRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnGetBigbluebuttonbnsByCourses(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, ): Observable<AxiosResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response>>;
    public modBigbluebuttonbnGetBigbluebuttonbnsByCourses(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, ): Observable<any> {

        if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest === null || modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest was null or undefined when calling modBigbluebuttonbnGetBigbluebuttonbnsByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response>(`${this.basePath}/mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses`,
            modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get the join URL for the meeting and create if it does not exist.
     * Get the join URL for the meeting and create if it does not exist.
     * @param modBigbluebuttonbnCanJoinRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnGetJoinUrl(modBigbluebuttonbnCanJoinRequest: ModBigbluebuttonbnCanJoinRequest, ): Observable<AxiosResponse<ModBigbluebuttonbnGetJoinUrl200Response>>;
    public modBigbluebuttonbnGetJoinUrl(modBigbluebuttonbnCanJoinRequest: ModBigbluebuttonbnCanJoinRequest, ): Observable<any> {

        if (modBigbluebuttonbnCanJoinRequest === null || modBigbluebuttonbnCanJoinRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnCanJoinRequest was null or undefined when calling modBigbluebuttonbnGetJoinUrl.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModBigbluebuttonbnGetJoinUrl200Response>(`${this.basePath}/mod_bigbluebuttonbn_get_join_url`,
            modBigbluebuttonbnCanJoinRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of recordings ready to be processed by a datatable.
     * Returns a list of recordings ready to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnGetRecordings(modBigbluebuttonbnGetRecordingsRequest: ModBigbluebuttonbnGetRecordingsRequest, ): Observable<AxiosResponse<ModBigbluebuttonbnGetRecordings200Response>>;
    public modBigbluebuttonbnGetRecordings(modBigbluebuttonbnGetRecordingsRequest: ModBigbluebuttonbnGetRecordingsRequest, ): Observable<any> {

        if (modBigbluebuttonbnGetRecordingsRequest === null || modBigbluebuttonbnGetRecordingsRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnGetRecordingsRequest was null or undefined when calling modBigbluebuttonbnGetRecordings.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModBigbluebuttonbnGetRecordings200Response>(`${this.basePath}/mod_bigbluebuttonbn_get_recordings`,
            modBigbluebuttonbnGetRecordingsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of recordings ready to import to be processed by a datatable.
     * Returns a list of recordings ready to import to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsToImportRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnGetRecordingsToImport(modBigbluebuttonbnGetRecordingsToImportRequest: ModBigbluebuttonbnGetRecordingsToImportRequest, ): Observable<AxiosResponse<ModBigbluebuttonbnGetRecordingsToImport200Response>>;
    public modBigbluebuttonbnGetRecordingsToImport(modBigbluebuttonbnGetRecordingsToImportRequest: ModBigbluebuttonbnGetRecordingsToImportRequest, ): Observable<any> {

        if (modBigbluebuttonbnGetRecordingsToImportRequest === null || modBigbluebuttonbnGetRecordingsToImportRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnGetRecordingsToImportRequest was null or undefined when calling modBigbluebuttonbnGetRecordingsToImport.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModBigbluebuttonbnGetRecordingsToImport200Response>(`${this.basePath}/mod_bigbluebuttonbn_get_recordings_to_import`,
            modBigbluebuttonbnGetRecordingsToImportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get displayable information on the meeting
     * Get displayable information on the meeting
     * @param modBigbluebuttonbnMeetingInfoRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnMeetingInfo(modBigbluebuttonbnMeetingInfoRequest: ModBigbluebuttonbnMeetingInfoRequest, ): Observable<AxiosResponse<ModBigbluebuttonbnMeetingInfo200Response>>;
    public modBigbluebuttonbnMeetingInfo(modBigbluebuttonbnMeetingInfoRequest: ModBigbluebuttonbnMeetingInfoRequest, ): Observable<any> {

        if (modBigbluebuttonbnMeetingInfoRequest === null || modBigbluebuttonbnMeetingInfoRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnMeetingInfoRequest was null or undefined when calling modBigbluebuttonbnMeetingInfo.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModBigbluebuttonbnMeetingInfo200Response>(`${this.basePath}/mod_bigbluebuttonbn_meeting_info`,
            modBigbluebuttonbnMeetingInfoRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Update a single recording
     * Update a single recording
     * @param modBigbluebuttonbnUpdateRecordingRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnUpdateRecording(modBigbluebuttonbnUpdateRecordingRequest: ModBigbluebuttonbnUpdateRecordingRequest, ): Observable<AxiosResponse<object>>;
    public modBigbluebuttonbnUpdateRecording(modBigbluebuttonbnUpdateRecordingRequest: ModBigbluebuttonbnUpdateRecordingRequest, ): Observable<any> {

        if (modBigbluebuttonbnUpdateRecordingRequest === null || modBigbluebuttonbnUpdateRecordingRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnUpdateRecordingRequest was null or undefined when calling modBigbluebuttonbnUpdateRecording.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_bigbluebuttonbn_update_recording`,
            modBigbluebuttonbnUpdateRecordingRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modBigbluebuttonbnViewBigbluebuttonbnRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modBigbluebuttonbnViewBigbluebuttonbn(modBigbluebuttonbnViewBigbluebuttonbnRequest: ModBigbluebuttonbnViewBigbluebuttonbnRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modBigbluebuttonbnViewBigbluebuttonbn(modBigbluebuttonbnViewBigbluebuttonbnRequest: ModBigbluebuttonbnViewBigbluebuttonbnRequest, ): Observable<any> {

        if (modBigbluebuttonbnViewBigbluebuttonbnRequest === null || modBigbluebuttonbnViewBigbluebuttonbnRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnViewBigbluebuttonbnRequest was null or undefined when calling modBigbluebuttonbnViewBigbluebuttonbn.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_bigbluebuttonbn_view_bigbluebuttonbn`,
            modBigbluebuttonbnViewBigbluebuttonbnRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
