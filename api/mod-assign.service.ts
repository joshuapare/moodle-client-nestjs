/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModAssignCopyPreviousAttemptRequest } from '../model/mod-assign-copy-previous-attempt-request';
import { ModAssignGetAssignments200Response } from '../model/mod-assign-get-assignments-200-response';
import { ModAssignGetAssignmentsRequest } from '../model/mod-assign-get-assignments-request';
import { ModAssignGetGrades200Response } from '../model/mod-assign-get-grades-200-response';
import { ModAssignGetGradesRequest } from '../model/mod-assign-get-grades-request';
import { ModAssignGetParticipant200Response } from '../model/mod-assign-get-participant-200-response';
import { ModAssignGetParticipantRequest } from '../model/mod-assign-get-participant-request';
import { ModAssignGetSubmissionStatus200Response } from '../model/mod-assign-get-submission-status-200-response';
import { ModAssignGetSubmissionStatusRequest } from '../model/mod-assign-get-submission-status-request';
import { ModAssignGetSubmissions200Response } from '../model/mod-assign-get-submissions-200-response';
import { ModAssignGetSubmissionsRequest } from '../model/mod-assign-get-submissions-request';
import { ModAssignGetUserFlags200Response } from '../model/mod-assign-get-user-flags-200-response';
import { ModAssignGetUserFlagsRequest } from '../model/mod-assign-get-user-flags-request';
import { ModAssignGetUserMappings200Response } from '../model/mod-assign-get-user-mappings-200-response';
import { ModAssignListParticipantsRequest } from '../model/mod-assign-list-participants-request';
import { ModAssignLockSubmissionsRequest } from '../model/mod-assign-lock-submissions-request';
import { ModAssignRevealIdentitiesRequest } from '../model/mod-assign-reveal-identities-request';
import { ModAssignRevertSubmissionsToDraftRequest } from '../model/mod-assign-revert-submissions-to-draft-request';
import { ModAssignSaveGradeRequest } from '../model/mod-assign-save-grade-request';
import { ModAssignSaveGradesRequest } from '../model/mod-assign-save-grades-request';
import { ModAssignSaveSubmissionRequest } from '../model/mod-assign-save-submission-request';
import { ModAssignSaveUserExtensionsRequest } from '../model/mod-assign-save-user-extensions-request';
import { ModAssignSetUserFlagsRequest } from '../model/mod-assign-set-user-flags-request';
import { ModAssignStartSubmission200Response } from '../model/mod-assign-start-submission-200-response';
import { ModAssignStartSubmissionRequest } from '../model/mod-assign-start-submission-request';
import { ModAssignSubmitForGradingRequest } from '../model/mod-assign-submit-for-grading-request';
import { ModAssignSubmitGradingFormRequest } from '../model/mod-assign-submit-grading-form-request';
import { ModAssignViewAssignRequest } from '../model/mod-assign-view-assign-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModAssignService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Copy a students previous attempt to a new attempt.
     * Copy a students previous attempt to a new attempt.
     * @param modAssignCopyPreviousAttemptRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignCopyPreviousAttempt(modAssignCopyPreviousAttemptRequest: ModAssignCopyPreviousAttemptRequest, ): Observable<AxiosResponse<object>>;
    public modAssignCopyPreviousAttempt(modAssignCopyPreviousAttemptRequest: ModAssignCopyPreviousAttemptRequest, ): Observable<any> {

        if (modAssignCopyPreviousAttemptRequest === null || modAssignCopyPreviousAttemptRequest === undefined) {
            throw new Error('Required parameter modAssignCopyPreviousAttemptRequest was null or undefined when calling modAssignCopyPreviousAttempt.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_copy_previous_attempt`,
            modAssignCopyPreviousAttemptRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns the courses and assignments for the users capability
     * Returns the courses and assignments for the users capability
     * @param modAssignGetAssignmentsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignGetAssignments(modAssignGetAssignmentsRequest: ModAssignGetAssignmentsRequest, ): Observable<AxiosResponse<ModAssignGetAssignments200Response>>;
    public modAssignGetAssignments(modAssignGetAssignmentsRequest: ModAssignGetAssignmentsRequest, ): Observable<any> {

        if (modAssignGetAssignmentsRequest === null || modAssignGetAssignmentsRequest === undefined) {
            throw new Error('Required parameter modAssignGetAssignmentsRequest was null or undefined when calling modAssignGetAssignments.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModAssignGetAssignments200Response>(`${this.basePath}/mod_assign_get_assignments`,
            modAssignGetAssignmentsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns grades from the assignment
     * Returns grades from the assignment
     * @param modAssignGetGradesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignGetGrades(modAssignGetGradesRequest: ModAssignGetGradesRequest, ): Observable<AxiosResponse<ModAssignGetGrades200Response>>;
    public modAssignGetGrades(modAssignGetGradesRequest: ModAssignGetGradesRequest, ): Observable<any> {

        if (modAssignGetGradesRequest === null || modAssignGetGradesRequest === undefined) {
            throw new Error('Required parameter modAssignGetGradesRequest was null or undefined when calling modAssignGetGrades.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModAssignGetGrades200Response>(`${this.basePath}/mod_assign_get_grades`,
            modAssignGetGradesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get a participant for an assignment, with some summary info about their submissions.
     * Get a participant for an assignment, with some summary info about their submissions.
     * @param modAssignGetParticipantRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignGetParticipant(modAssignGetParticipantRequest: ModAssignGetParticipantRequest, ): Observable<AxiosResponse<ModAssignGetParticipant200Response>>;
    public modAssignGetParticipant(modAssignGetParticipantRequest: ModAssignGetParticipantRequest, ): Observable<any> {

        if (modAssignGetParticipantRequest === null || modAssignGetParticipantRequest === undefined) {
            throw new Error('Required parameter modAssignGetParticipantRequest was null or undefined when calling modAssignGetParticipant.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModAssignGetParticipant200Response>(`${this.basePath}/mod_assign_get_participant`,
            modAssignGetParticipantRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns information about an assignment submission status for a given user.
     * Returns information about an assignment submission status for a given user.
     * @param modAssignGetSubmissionStatusRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignGetSubmissionStatus(modAssignGetSubmissionStatusRequest: ModAssignGetSubmissionStatusRequest, ): Observable<AxiosResponse<ModAssignGetSubmissionStatus200Response>>;
    public modAssignGetSubmissionStatus(modAssignGetSubmissionStatusRequest: ModAssignGetSubmissionStatusRequest, ): Observable<any> {

        if (modAssignGetSubmissionStatusRequest === null || modAssignGetSubmissionStatusRequest === undefined) {
            throw new Error('Required parameter modAssignGetSubmissionStatusRequest was null or undefined when calling modAssignGetSubmissionStatus.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModAssignGetSubmissionStatus200Response>(`${this.basePath}/mod_assign_get_submission_status`,
            modAssignGetSubmissionStatusRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns the submissions for assignments
     * Returns the submissions for assignments
     * @param modAssignGetSubmissionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignGetSubmissions(modAssignGetSubmissionsRequest: ModAssignGetSubmissionsRequest, ): Observable<AxiosResponse<ModAssignGetSubmissions200Response>>;
    public modAssignGetSubmissions(modAssignGetSubmissionsRequest: ModAssignGetSubmissionsRequest, ): Observable<any> {

        if (modAssignGetSubmissionsRequest === null || modAssignGetSubmissionsRequest === undefined) {
            throw new Error('Required parameter modAssignGetSubmissionsRequest was null or undefined when calling modAssignGetSubmissions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModAssignGetSubmissions200Response>(`${this.basePath}/mod_assign_get_submissions`,
            modAssignGetSubmissionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns the user flags for assignments
     * Returns the user flags for assignments
     * @param modAssignGetUserFlagsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignGetUserFlags(modAssignGetUserFlagsRequest: ModAssignGetUserFlagsRequest, ): Observable<AxiosResponse<ModAssignGetUserFlags200Response>>;
    public modAssignGetUserFlags(modAssignGetUserFlagsRequest: ModAssignGetUserFlagsRequest, ): Observable<any> {

        if (modAssignGetUserFlagsRequest === null || modAssignGetUserFlagsRequest === undefined) {
            throw new Error('Required parameter modAssignGetUserFlagsRequest was null or undefined when calling modAssignGetUserFlags.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModAssignGetUserFlags200Response>(`${this.basePath}/mod_assign_get_user_flags`,
            modAssignGetUserFlagsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns the blind marking mappings for assignments
     * Returns the blind marking mappings for assignments
     * @param modAssignGetUserFlagsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignGetUserMappings(modAssignGetUserFlagsRequest: ModAssignGetUserFlagsRequest, ): Observable<AxiosResponse<ModAssignGetUserMappings200Response>>;
    public modAssignGetUserMappings(modAssignGetUserFlagsRequest: ModAssignGetUserFlagsRequest, ): Observable<any> {

        if (modAssignGetUserFlagsRequest === null || modAssignGetUserFlagsRequest === undefined) {
            throw new Error('Required parameter modAssignGetUserFlagsRequest was null or undefined when calling modAssignGetUserMappings.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModAssignGetUserMappings200Response>(`${this.basePath}/mod_assign_get_user_mappings`,
            modAssignGetUserFlagsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * List the participants for a single assignment, with some summary info about their submissions.
     * List the participants for a single assignment, with some summary info about their submissions.
     * @param modAssignListParticipantsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignListParticipants(modAssignListParticipantsRequest: ModAssignListParticipantsRequest, ): Observable<AxiosResponse<object>>;
    public modAssignListParticipants(modAssignListParticipantsRequest: ModAssignListParticipantsRequest, ): Observable<any> {

        if (modAssignListParticipantsRequest === null || modAssignListParticipantsRequest === undefined) {
            throw new Error('Required parameter modAssignListParticipantsRequest was null or undefined when calling modAssignListParticipants.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_list_participants`,
            modAssignListParticipantsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Prevent students from making changes to a list of submissions
     * Prevent students from making changes to a list of submissions
     * @param modAssignLockSubmissionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignLockSubmissions(modAssignLockSubmissionsRequest: ModAssignLockSubmissionsRequest, ): Observable<AxiosResponse<object>>;
    public modAssignLockSubmissions(modAssignLockSubmissionsRequest: ModAssignLockSubmissionsRequest, ): Observable<any> {

        if (modAssignLockSubmissionsRequest === null || modAssignLockSubmissionsRequest === undefined) {
            throw new Error('Required parameter modAssignLockSubmissionsRequest was null or undefined when calling modAssignLockSubmissions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_lock_submissions`,
            modAssignLockSubmissionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Reveal the identities for a blind marking assignment
     * Reveal the identities for a blind marking assignment
     * @param modAssignRevealIdentitiesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignRevealIdentities(modAssignRevealIdentitiesRequest: ModAssignRevealIdentitiesRequest, ): Observable<AxiosResponse<object>>;
    public modAssignRevealIdentities(modAssignRevealIdentitiesRequest: ModAssignRevealIdentitiesRequest, ): Observable<any> {

        if (modAssignRevealIdentitiesRequest === null || modAssignRevealIdentitiesRequest === undefined) {
            throw new Error('Required parameter modAssignRevealIdentitiesRequest was null or undefined when calling modAssignRevealIdentities.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_reveal_identities`,
            modAssignRevealIdentitiesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Reverts the list of submissions to draft status
     * Reverts the list of submissions to draft status
     * @param modAssignRevertSubmissionsToDraftRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignRevertSubmissionsToDraft(modAssignRevertSubmissionsToDraftRequest: ModAssignRevertSubmissionsToDraftRequest, ): Observable<AxiosResponse<object>>;
    public modAssignRevertSubmissionsToDraft(modAssignRevertSubmissionsToDraftRequest: ModAssignRevertSubmissionsToDraftRequest, ): Observable<any> {

        if (modAssignRevertSubmissionsToDraftRequest === null || modAssignRevertSubmissionsToDraftRequest === undefined) {
            throw new Error('Required parameter modAssignRevertSubmissionsToDraftRequest was null or undefined when calling modAssignRevertSubmissionsToDraft.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_revert_submissions_to_draft`,
            modAssignRevertSubmissionsToDraftRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Save a grade update for a single student.
     * Save a grade update for a single student.
     * @param modAssignSaveGradeRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignSaveGrade(modAssignSaveGradeRequest: ModAssignSaveGradeRequest, ): Observable<AxiosResponse<object>>;
    public modAssignSaveGrade(modAssignSaveGradeRequest: ModAssignSaveGradeRequest, ): Observable<any> {

        if (modAssignSaveGradeRequest === null || modAssignSaveGradeRequest === undefined) {
            throw new Error('Required parameter modAssignSaveGradeRequest was null or undefined when calling modAssignSaveGrade.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_save_grade`,
            modAssignSaveGradeRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Save multiple grade updates for an assignment.
     * Save multiple grade updates for an assignment.
     * @param modAssignSaveGradesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignSaveGrades(modAssignSaveGradesRequest: ModAssignSaveGradesRequest, ): Observable<AxiosResponse<object>>;
    public modAssignSaveGrades(modAssignSaveGradesRequest: ModAssignSaveGradesRequest, ): Observable<any> {

        if (modAssignSaveGradesRequest === null || modAssignSaveGradesRequest === undefined) {
            throw new Error('Required parameter modAssignSaveGradesRequest was null or undefined when calling modAssignSaveGrades.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_save_grades`,
            modAssignSaveGradesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Update the current students submission
     * Update the current students submission
     * @param modAssignSaveSubmissionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignSaveSubmission(modAssignSaveSubmissionRequest: ModAssignSaveSubmissionRequest, ): Observable<AxiosResponse<object>>;
    public modAssignSaveSubmission(modAssignSaveSubmissionRequest: ModAssignSaveSubmissionRequest, ): Observable<any> {

        if (modAssignSaveSubmissionRequest === null || modAssignSaveSubmissionRequest === undefined) {
            throw new Error('Required parameter modAssignSaveSubmissionRequest was null or undefined when calling modAssignSaveSubmission.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_save_submission`,
            modAssignSaveSubmissionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Save a list of assignment extensions
     * Save a list of assignment extensions
     * @param modAssignSaveUserExtensionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignSaveUserExtensions(modAssignSaveUserExtensionsRequest: ModAssignSaveUserExtensionsRequest, ): Observable<AxiosResponse<object>>;
    public modAssignSaveUserExtensions(modAssignSaveUserExtensionsRequest: ModAssignSaveUserExtensionsRequest, ): Observable<any> {

        if (modAssignSaveUserExtensionsRequest === null || modAssignSaveUserExtensionsRequest === undefined) {
            throw new Error('Required parameter modAssignSaveUserExtensionsRequest was null or undefined when calling modAssignSaveUserExtensions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_save_user_extensions`,
            modAssignSaveUserExtensionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Creates or updates user flags
     * Creates or updates user flags
     * @param modAssignSetUserFlagsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignSetUserFlags(modAssignSetUserFlagsRequest: ModAssignSetUserFlagsRequest, ): Observable<AxiosResponse<object>>;
    public modAssignSetUserFlags(modAssignSetUserFlagsRequest: ModAssignSetUserFlagsRequest, ): Observable<any> {

        if (modAssignSetUserFlagsRequest === null || modAssignSetUserFlagsRequest === undefined) {
            throw new Error('Required parameter modAssignSetUserFlagsRequest was null or undefined when calling modAssignSetUserFlags.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_set_user_flags`,
            modAssignSetUserFlagsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Start a submission for user if assignment has a time limit.
     * Start a submission for user if assignment has a time limit.
     * @param modAssignStartSubmissionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignStartSubmission(modAssignStartSubmissionRequest: ModAssignStartSubmissionRequest, ): Observable<AxiosResponse<ModAssignStartSubmission200Response>>;
    public modAssignStartSubmission(modAssignStartSubmissionRequest: ModAssignStartSubmissionRequest, ): Observable<any> {

        if (modAssignStartSubmissionRequest === null || modAssignStartSubmissionRequest === undefined) {
            throw new Error('Required parameter modAssignStartSubmissionRequest was null or undefined when calling modAssignStartSubmission.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModAssignStartSubmission200Response>(`${this.basePath}/mod_assign_start_submission`,
            modAssignStartSubmissionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Submit the current students assignment for grading
     * Submit the current students assignment for grading
     * @param modAssignSubmitForGradingRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignSubmitForGrading(modAssignSubmitForGradingRequest: ModAssignSubmitForGradingRequest, ): Observable<AxiosResponse<object>>;
    public modAssignSubmitForGrading(modAssignSubmitForGradingRequest: ModAssignSubmitForGradingRequest, ): Observable<any> {

        if (modAssignSubmitForGradingRequest === null || modAssignSubmitForGradingRequest === undefined) {
            throw new Error('Required parameter modAssignSubmitForGradingRequest was null or undefined when calling modAssignSubmitForGrading.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_submit_for_grading`,
            modAssignSubmitForGradingRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Submit the grading form data via ajax
     * Submit the grading form data via ajax
     * @param modAssignSubmitGradingFormRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignSubmitGradingForm(modAssignSubmitGradingFormRequest: ModAssignSubmitGradingFormRequest, ): Observable<AxiosResponse<object>>;
    public modAssignSubmitGradingForm(modAssignSubmitGradingFormRequest: ModAssignSubmitGradingFormRequest, ): Observable<any> {

        if (modAssignSubmitGradingFormRequest === null || modAssignSubmitGradingFormRequest === undefined) {
            throw new Error('Required parameter modAssignSubmitGradingFormRequest was null or undefined when calling modAssignSubmitGradingForm.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_submit_grading_form`,
            modAssignSubmitGradingFormRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Allow students to make changes to a list of submissions
     * Allow students to make changes to a list of submissions
     * @param modAssignRevertSubmissionsToDraftRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignUnlockSubmissions(modAssignRevertSubmissionsToDraftRequest: ModAssignRevertSubmissionsToDraftRequest, ): Observable<AxiosResponse<object>>;
    public modAssignUnlockSubmissions(modAssignRevertSubmissionsToDraftRequest: ModAssignRevertSubmissionsToDraftRequest, ): Observable<any> {

        if (modAssignRevertSubmissionsToDraftRequest === null || modAssignRevertSubmissionsToDraftRequest === undefined) {
            throw new Error('Required parameter modAssignRevertSubmissionsToDraftRequest was null or undefined when calling modAssignUnlockSubmissions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/mod_assign_unlock_submissions`,
            modAssignRevertSubmissionsToDraftRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Update the module completion status.
     * Update the module completion status.
     * @param modAssignViewAssignRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignViewAssign(modAssignViewAssignRequest: ModAssignViewAssignRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modAssignViewAssign(modAssignViewAssignRequest: ModAssignViewAssignRequest, ): Observable<any> {

        if (modAssignViewAssignRequest === null || modAssignViewAssignRequest === undefined) {
            throw new Error('Required parameter modAssignViewAssignRequest was null or undefined when calling modAssignViewAssign.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_assign_view_assign`,
            modAssignViewAssignRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the grading_table_viewed event.
     * Trigger the grading_table_viewed event.
     * @param modAssignViewAssignRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignViewGradingTable(modAssignViewAssignRequest: ModAssignViewAssignRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modAssignViewGradingTable(modAssignViewAssignRequest: ModAssignViewAssignRequest, ): Observable<any> {

        if (modAssignViewAssignRequest === null || modAssignViewAssignRequest === undefined) {
            throw new Error('Required parameter modAssignViewAssignRequest was null or undefined when calling modAssignViewGradingTable.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_assign_view_grading_table`,
            modAssignViewAssignRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the submission status viewed event.
     * Trigger the submission status viewed event.
     * @param modAssignViewAssignRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modAssignViewSubmissionStatus(modAssignViewAssignRequest: ModAssignViewAssignRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modAssignViewSubmissionStatus(modAssignViewAssignRequest: ModAssignViewAssignRequest, ): Observable<any> {

        if (modAssignViewAssignRequest === null || modAssignViewAssignRequest === undefined) {
            throw new Error('Required parameter modAssignViewAssignRequest was null or undefined when calling modAssignViewSubmissionStatus.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_assign_view_submission_status`,
            modAssignViewAssignRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
