/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModChatGetChatsByCoursesRequest } from '../model/mod-chat-get-chats-by-courses-request';
import { ModChoiceDeleteChoiceResponses200Response } from '../model/mod-choice-delete-choice-responses-200-response';
import { ModChoiceDeleteChoiceResponsesRequest } from '../model/mod-choice-delete-choice-responses-request';
import { ModChoiceGetChoiceOptions200Response } from '../model/mod-choice-get-choice-options-200-response';
import { ModChoiceGetChoiceOptionsRequest } from '../model/mod-choice-get-choice-options-request';
import { ModChoiceGetChoiceResults200Response } from '../model/mod-choice-get-choice-results-200-response';
import { ModChoiceGetChoicesByCourses200Response } from '../model/mod-choice-get-choices-by-courses-200-response';
import { ModChoiceSubmitChoiceResponse200Response } from '../model/mod-choice-submit-choice-response-200-response';
import { ModChoiceSubmitChoiceResponseRequest } from '../model/mod-choice-submit-choice-response-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModChoiceService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Delete the given submitted responses in a choice
     * Delete the given submitted responses in a choice
     * @param modChoiceDeleteChoiceResponsesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChoiceDeleteChoiceResponses(modChoiceDeleteChoiceResponsesRequest: ModChoiceDeleteChoiceResponsesRequest, ): Observable<AxiosResponse<ModChoiceDeleteChoiceResponses200Response>>;
    public modChoiceDeleteChoiceResponses(modChoiceDeleteChoiceResponsesRequest: ModChoiceDeleteChoiceResponsesRequest, ): Observable<any> {

        if (modChoiceDeleteChoiceResponsesRequest === null || modChoiceDeleteChoiceResponsesRequest === undefined) {
            throw new Error('Required parameter modChoiceDeleteChoiceResponsesRequest was null or undefined when calling modChoiceDeleteChoiceResponses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChoiceDeleteChoiceResponses200Response>(`${this.basePath}/mod_choice_delete_choice_responses`,
            modChoiceDeleteChoiceResponsesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieve options for a specific choice.
     * Retrieve options for a specific choice.
     * @param modChoiceGetChoiceOptionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChoiceGetChoiceOptions(modChoiceGetChoiceOptionsRequest: ModChoiceGetChoiceOptionsRequest, ): Observable<AxiosResponse<ModChoiceGetChoiceOptions200Response>>;
    public modChoiceGetChoiceOptions(modChoiceGetChoiceOptionsRequest: ModChoiceGetChoiceOptionsRequest, ): Observable<any> {

        if (modChoiceGetChoiceOptionsRequest === null || modChoiceGetChoiceOptionsRequest === undefined) {
            throw new Error('Required parameter modChoiceGetChoiceOptionsRequest was null or undefined when calling modChoiceGetChoiceOptions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChoiceGetChoiceOptions200Response>(`${this.basePath}/mod_choice_get_choice_options`,
            modChoiceGetChoiceOptionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Retrieve users results for a given choice.
     * Retrieve users results for a given choice.
     * @param modChoiceGetChoiceOptionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChoiceGetChoiceResults(modChoiceGetChoiceOptionsRequest: ModChoiceGetChoiceOptionsRequest, ): Observable<AxiosResponse<ModChoiceGetChoiceResults200Response>>;
    public modChoiceGetChoiceResults(modChoiceGetChoiceOptionsRequest: ModChoiceGetChoiceOptionsRequest, ): Observable<any> {

        if (modChoiceGetChoiceOptionsRequest === null || modChoiceGetChoiceOptionsRequest === undefined) {
            throw new Error('Required parameter modChoiceGetChoiceOptionsRequest was null or undefined when calling modChoiceGetChoiceResults.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChoiceGetChoiceResults200Response>(`${this.basePath}/mod_choice_get_choice_results`,
            modChoiceGetChoiceOptionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChoiceGetChoicesByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<AxiosResponse<ModChoiceGetChoicesByCourses200Response>>;
    public modChoiceGetChoicesByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<any> {

        if (modChatGetChatsByCoursesRequest === null || modChatGetChatsByCoursesRequest === undefined) {
            throw new Error('Required parameter modChatGetChatsByCoursesRequest was null or undefined when calling modChoiceGetChoicesByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChoiceGetChoicesByCourses200Response>(`${this.basePath}/mod_choice_get_choices_by_courses`,
            modChatGetChatsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Submit responses to a specific choice item.
     * Submit responses to a specific choice item.
     * @param modChoiceSubmitChoiceResponseRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChoiceSubmitChoiceResponse(modChoiceSubmitChoiceResponseRequest: ModChoiceSubmitChoiceResponseRequest, ): Observable<AxiosResponse<ModChoiceSubmitChoiceResponse200Response>>;
    public modChoiceSubmitChoiceResponse(modChoiceSubmitChoiceResponseRequest: ModChoiceSubmitChoiceResponseRequest, ): Observable<any> {

        if (modChoiceSubmitChoiceResponseRequest === null || modChoiceSubmitChoiceResponseRequest === undefined) {
            throw new Error('Required parameter modChoiceSubmitChoiceResponseRequest was null or undefined when calling modChoiceSubmitChoiceResponse.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModChoiceSubmitChoiceResponse200Response>(`${this.basePath}/mod_choice_submit_choice_response`,
            modChoiceSubmitChoiceResponseRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modChoiceGetChoiceOptionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modChoiceViewChoice(modChoiceGetChoiceOptionsRequest: ModChoiceGetChoiceOptionsRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modChoiceViewChoice(modChoiceGetChoiceOptionsRequest: ModChoiceGetChoiceOptionsRequest, ): Observable<any> {

        if (modChoiceGetChoiceOptionsRequest === null || modChoiceGetChoiceOptionsRequest === undefined) {
            throw new Error('Required parameter modChoiceGetChoiceOptionsRequest was null or undefined when calling modChoiceViewChoice.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_choice_view_choice`,
            modChoiceGetChoiceOptionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
