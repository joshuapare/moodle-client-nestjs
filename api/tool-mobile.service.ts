/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { ErrorResponse } from '../model/error-response';
import { ToolMobileCallExternalFunctions200Response } from '../model/tool-mobile-call-external-functions-200-response';
import { ToolMobileCallExternalFunctionsRequest } from '../model/tool-mobile-call-external-functions-request';
import { ToolMobileGetAutologinKey200Response } from '../model/tool-mobile-get-autologin-key-200-response';
import { ToolMobileGetAutologinKeyRequest } from '../model/tool-mobile-get-autologin-key-request';
import { ToolMobileGetConfig200Response } from '../model/tool-mobile-get-config-200-response';
import { ToolMobileGetConfigRequest } from '../model/tool-mobile-get-config-request';
import { ToolMobileGetContent200Response } from '../model/tool-mobile-get-content-200-response';
import { ToolMobileGetContentRequest } from '../model/tool-mobile-get-content-request';
import { ToolMobileGetPluginsSupportingMobile200Response } from '../model/tool-mobile-get-plugins-supporting-mobile-200-response';
import { ToolMobileGetPublicConfig200Response } from '../model/tool-mobile-get-public-config-200-response';
import { ToolMobileGetTokensForQrLogin200Response } from '../model/tool-mobile-get-tokens-for-qr-login-200-response';
import { ToolMobileGetTokensForQrLoginRequest } from '../model/tool-mobile-get-tokens-for-qr-login-request';
import { ToolMobileValidateSubscriptionKey200Response } from '../model/tool-mobile-validate-subscription-key-200-response';
import { ToolMobileValidateSubscriptionKeyRequest } from '../model/tool-mobile-validate-subscription-key-request';
import { Configuration } from '../configuration';


@Injectable()
export class ToolMobileService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Call multiple external functions and return all responses.
     * Call multiple external functions and return all responses.
     * @param toolMobileCallExternalFunctionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolMobileCallExternalFunctions(toolMobileCallExternalFunctionsRequest: ToolMobileCallExternalFunctionsRequest, ): Observable<AxiosResponse<ToolMobileCallExternalFunctions200Response>>;
    public toolMobileCallExternalFunctions(toolMobileCallExternalFunctionsRequest: ToolMobileCallExternalFunctionsRequest, ): Observable<any> {

        if (toolMobileCallExternalFunctionsRequest === null || toolMobileCallExternalFunctionsRequest === undefined) {
            throw new Error('Required parameter toolMobileCallExternalFunctionsRequest was null or undefined when calling toolMobileCallExternalFunctions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolMobileCallExternalFunctions200Response>(`${this.basePath}/tool_mobile_call_external_functions`,
            toolMobileCallExternalFunctionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
     * @param toolMobileGetAutologinKeyRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolMobileGetAutologinKey(toolMobileGetAutologinKeyRequest: ToolMobileGetAutologinKeyRequest, ): Observable<AxiosResponse<ToolMobileGetAutologinKey200Response>>;
    public toolMobileGetAutologinKey(toolMobileGetAutologinKeyRequest: ToolMobileGetAutologinKeyRequest, ): Observable<any> {

        if (toolMobileGetAutologinKeyRequest === null || toolMobileGetAutologinKeyRequest === undefined) {
            throw new Error('Required parameter toolMobileGetAutologinKeyRequest was null or undefined when calling toolMobileGetAutologinKey.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolMobileGetAutologinKey200Response>(`${this.basePath}/tool_mobile_get_autologin_key`,
            toolMobileGetAutologinKeyRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of the site configurations, filtering by section.
     * Returns a list of the site configurations, filtering by section.
     * @param toolMobileGetConfigRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolMobileGetConfig(toolMobileGetConfigRequest: ToolMobileGetConfigRequest, ): Observable<AxiosResponse<ToolMobileGetConfig200Response>>;
    public toolMobileGetConfig(toolMobileGetConfigRequest: ToolMobileGetConfigRequest, ): Observable<any> {

        if (toolMobileGetConfigRequest === null || toolMobileGetConfigRequest === undefined) {
            throw new Error('Required parameter toolMobileGetConfigRequest was null or undefined when calling toolMobileGetConfig.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolMobileGetConfig200Response>(`${this.basePath}/tool_mobile_get_config`,
            toolMobileGetConfigRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a piece of content to be displayed in the Mobile app.
     * Returns a piece of content to be displayed in the Mobile app.
     * @param toolMobileGetContentRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolMobileGetContent(toolMobileGetContentRequest: ToolMobileGetContentRequest, ): Observable<AxiosResponse<ToolMobileGetContent200Response>>;
    public toolMobileGetContent(toolMobileGetContentRequest: ToolMobileGetContentRequest, ): Observable<any> {

        if (toolMobileGetContentRequest === null || toolMobileGetContentRequest === undefined) {
            throw new Error('Required parameter toolMobileGetContentRequest was null or undefined when calling toolMobileGetContent.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolMobileGetContent200Response>(`${this.basePath}/tool_mobile_get_content`,
            toolMobileGetContentRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of Moodle plugins supporting the mobile app.
     * Returns a list of Moodle plugins supporting the mobile app.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolMobileGetPluginsSupportingMobile(): Observable<AxiosResponse<ToolMobileGetPluginsSupportingMobile200Response>>;
    public toolMobileGetPluginsSupportingMobile(): Observable<any> {

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.post<ToolMobileGetPluginsSupportingMobile200Response>(`${this.basePath}/tool_mobile_get_plugins_supporting_mobile`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of the site public settings, those not requiring authentication.
     * Returns a list of the site public settings, those not requiring authentication.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolMobileGetPublicConfig(): Observable<AxiosResponse<ToolMobileGetPublicConfig200Response>>;
    public toolMobileGetPublicConfig(): Observable<any> {

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.post<ToolMobileGetPublicConfig200Response>(`${this.basePath}/tool_mobile_get_public_config`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a WebService token (and private token) for QR login.
     * Returns a WebService token (and private token) for QR login.
     * @param toolMobileGetTokensForQrLoginRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolMobileGetTokensForQrLogin(toolMobileGetTokensForQrLoginRequest: ToolMobileGetTokensForQrLoginRequest, ): Observable<AxiosResponse<ToolMobileGetTokensForQrLogin200Response>>;
    public toolMobileGetTokensForQrLogin(toolMobileGetTokensForQrLoginRequest: ToolMobileGetTokensForQrLoginRequest, ): Observable<any> {

        if (toolMobileGetTokensForQrLoginRequest === null || toolMobileGetTokensForQrLoginRequest === undefined) {
            throw new Error('Required parameter toolMobileGetTokensForQrLoginRequest was null or undefined when calling toolMobileGetTokensForQrLogin.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolMobileGetTokensForQrLogin200Response>(`${this.basePath}/tool_mobile_get_tokens_for_qr_login`,
            toolMobileGetTokensForQrLoginRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Check if the given site subscription key is valid.
     * Check if the given site subscription key is valid.
     * @param toolMobileValidateSubscriptionKeyRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolMobileValidateSubscriptionKey(toolMobileValidateSubscriptionKeyRequest: ToolMobileValidateSubscriptionKeyRequest, ): Observable<AxiosResponse<ToolMobileValidateSubscriptionKey200Response>>;
    public toolMobileValidateSubscriptionKey(toolMobileValidateSubscriptionKeyRequest: ToolMobileValidateSubscriptionKeyRequest, ): Observable<any> {

        if (toolMobileValidateSubscriptionKeyRequest === null || toolMobileValidateSubscriptionKeyRequest === undefined) {
            throw new Error('Required parameter toolMobileValidateSubscriptionKeyRequest was null or undefined when calling toolMobileValidateSubscriptionKey.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolMobileValidateSubscriptionKey200Response>(`${this.basePath}/tool_mobile_validate_subscription_key`,
            toolMobileValidateSubscriptionKeyRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
