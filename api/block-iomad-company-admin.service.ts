/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { BlockIomadCompanyAdminAllocateLicensesRequest } from '../model/block-iomad-company-admin-allocate-licenses-request';
import { BlockIomadCompanyAdminAssignCoursesRequest } from '../model/block-iomad-company-admin-assign-courses-request';
import { BlockIomadCompanyAdminAssignUsers200Response } from '../model/block-iomad-company-admin-assign-users-200-response';
import { BlockIomadCompanyAdminAssignUsersRequest } from '../model/block-iomad-company-admin-assign-users-request';
import { BlockIomadCompanyAdminCapabilityDeleteTemplateRequest } from '../model/block-iomad-company-admin-capability-delete-template-request';
import { BlockIomadCompanyAdminCheckToken200Response } from '../model/block-iomad-company-admin-check-token-200-response';
import { BlockIomadCompanyAdminCheckTokenRequest } from '../model/block-iomad-company-admin-check-token-request';
import { BlockIomadCompanyAdminCreateCompaniesRequest } from '../model/block-iomad-company-admin-create-companies-request';
import { BlockIomadCompanyAdminCreateLicensesRequest } from '../model/block-iomad-company-admin-create-licenses-request';
import { BlockIomadCompanyAdminDeleteLicensesRequest } from '../model/block-iomad-company-admin-delete-licenses-request';
import { BlockIomadCompanyAdminEditCompaniesRequest } from '../model/block-iomad-company-admin-edit-companies-request';
import { BlockIomadCompanyAdminEditLicensesRequest } from '../model/block-iomad-company-admin-edit-licenses-request';
import { BlockIomadCompanyAdminEnrolUsersRequest } from '../model/block-iomad-company-admin-enrol-users-request';
import { BlockIomadCompanyAdminGetCompanies200Response } from '../model/block-iomad-company-admin-get-companies-200-response';
import { BlockIomadCompanyAdminGetCompaniesRequest } from '../model/block-iomad-company-admin-get-companies-request';
import { BlockIomadCompanyAdminGetCompanyCourses200Response } from '../model/block-iomad-company-admin-get-company-courses-200-response';
import { BlockIomadCompanyAdminGetCompanyCoursesRequest } from '../model/block-iomad-company-admin-get-company-courses-request';
import { BlockIomadCompanyAdminGetCourseInfoRequest } from '../model/block-iomad-company-admin-get-course-info-request';
import { BlockIomadCompanyAdminGetDepartmentUsers200Response } from '../model/block-iomad-company-admin-get-department-users-200-response';
import { BlockIomadCompanyAdminGetDepartmentUsersRequest } from '../model/block-iomad-company-admin-get-department-users-request';
import { BlockIomadCompanyAdminGetDepartments200Response } from '../model/block-iomad-company-admin-get-departments-200-response';
import { BlockIomadCompanyAdminGetDepartmentsRequest } from '../model/block-iomad-company-admin-get-departments-request';
import { BlockIomadCompanyAdminGetLicenseFromId200Response } from '../model/block-iomad-company-admin-get-license-from-id-200-response';
import { BlockIomadCompanyAdminGetLicenseFromIdRequest } from '../model/block-iomad-company-admin-get-license-from-id-request';
import { BlockIomadCompanyAdminGetLicenseInfo200Response } from '../model/block-iomad-company-admin-get-license-info-200-response';
import { BlockIomadCompanyAdminGetLicenseInfoRequest } from '../model/block-iomad-company-admin-get-license-info-request';
import { BlockIomadCompanyAdminMoveUsersRequest } from '../model/block-iomad-company-admin-move-users-request';
import { BlockIomadCompanyAdminRestrictCapabilityRequest } from '../model/block-iomad-company-admin-restrict-capability-request';
import { BlockIomadCompanyAdminSyncUsers200Response } from '../model/block-iomad-company-admin-sync-users-200-response';
import { BlockIomadCompanyAdminSyncUsersRequest } from '../model/block-iomad-company-admin-sync-users-request';
import { BlockIomadCompanyAdminUnallocateLicensesRequest } from '../model/block-iomad-company-admin-unallocate-licenses-request';
import { BlockIomadCompanyAdminUnassignCoursesRequest } from '../model/block-iomad-company-admin-unassign-courses-request';
import { BlockIomadCompanyAdminUnassignUsersRequest } from '../model/block-iomad-company-admin-unassign-users-request';
import { BlockIomadCompanyAdminUpdateCoursesRequest } from '../model/block-iomad-company-admin-update-courses-request';
import { ErrorResponse } from '../model/error-response';
import { Configuration } from '../configuration';


@Injectable()
export class BlockIomadCompanyAdminService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Allocate course licenses to a user
     * Allocate course licenses to a user
     * @param blockIomadCompanyAdminAllocateLicensesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminAllocateLicenses(blockIomadCompanyAdminAllocateLicensesRequest: BlockIomadCompanyAdminAllocateLicensesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminAllocateLicenses(blockIomadCompanyAdminAllocateLicensesRequest: BlockIomadCompanyAdminAllocateLicensesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminAllocateLicensesRequest === null || blockIomadCompanyAdminAllocateLicensesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminAllocateLicensesRequest was null or undefined when calling blockIomadCompanyAdminAllocateLicenses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_allocate_licenses`,
            blockIomadCompanyAdminAllocateLicensesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Assign a course to a company
     * Assign a course to a company
     * @param blockIomadCompanyAdminAssignCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminAssignCourses(blockIomadCompanyAdminAssignCoursesRequest: BlockIomadCompanyAdminAssignCoursesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminAssignCourses(blockIomadCompanyAdminAssignCoursesRequest: BlockIomadCompanyAdminAssignCoursesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminAssignCoursesRequest === null || blockIomadCompanyAdminAssignCoursesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminAssignCoursesRequest was null or undefined when calling blockIomadCompanyAdminAssignCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_assign_courses`,
            blockIomadCompanyAdminAssignCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Assign users to a company
     * Assign users to a company
     * @param blockIomadCompanyAdminAssignUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminAssignUsers(blockIomadCompanyAdminAssignUsersRequest: BlockIomadCompanyAdminAssignUsersRequest, ): Observable<AxiosResponse<BlockIomadCompanyAdminAssignUsers200Response>>;
    public blockIomadCompanyAdminAssignUsers(blockIomadCompanyAdminAssignUsersRequest: BlockIomadCompanyAdminAssignUsersRequest, ): Observable<any> {

        if (blockIomadCompanyAdminAssignUsersRequest === null || blockIomadCompanyAdminAssignUsersRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminAssignUsersRequest was null or undefined when calling blockIomadCompanyAdminAssignUsers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<BlockIomadCompanyAdminAssignUsers200Response>(`${this.basePath}/block_iomad_company_admin_assign_users`,
            blockIomadCompanyAdminAssignUsersRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Delete Iomad capabilities template
     * Delete Iomad capabilities template
     * @param blockIomadCompanyAdminCapabilityDeleteTemplateRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminCapabilityDeleteTemplate(blockIomadCompanyAdminCapabilityDeleteTemplateRequest: BlockIomadCompanyAdminCapabilityDeleteTemplateRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminCapabilityDeleteTemplate(blockIomadCompanyAdminCapabilityDeleteTemplateRequest: BlockIomadCompanyAdminCapabilityDeleteTemplateRequest, ): Observable<any> {

        if (blockIomadCompanyAdminCapabilityDeleteTemplateRequest === null || blockIomadCompanyAdminCapabilityDeleteTemplateRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminCapabilityDeleteTemplateRequest was null or undefined when calling blockIomadCompanyAdminCapabilityDeleteTemplate.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_capability_delete_template`,
            blockIomadCompanyAdminCapabilityDeleteTemplateRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Check SSO token
     * Check SSO token
     * @param blockIomadCompanyAdminCheckTokenRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminCheckToken(blockIomadCompanyAdminCheckTokenRequest: BlockIomadCompanyAdminCheckTokenRequest, ): Observable<AxiosResponse<BlockIomadCompanyAdminCheckToken200Response>>;
    public blockIomadCompanyAdminCheckToken(blockIomadCompanyAdminCheckTokenRequest: BlockIomadCompanyAdminCheckTokenRequest, ): Observable<any> {

        if (blockIomadCompanyAdminCheckTokenRequest === null || blockIomadCompanyAdminCheckTokenRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminCheckTokenRequest was null or undefined when calling blockIomadCompanyAdminCheckToken.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<BlockIomadCompanyAdminCheckToken200Response>(`${this.basePath}/block_iomad_company_admin_check_token`,
            blockIomadCompanyAdminCheckTokenRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Create new Iomad companies
     * Create new Iomad companies
     * @param blockIomadCompanyAdminCreateCompaniesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminCreateCompanies(blockIomadCompanyAdminCreateCompaniesRequest: BlockIomadCompanyAdminCreateCompaniesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminCreateCompanies(blockIomadCompanyAdminCreateCompaniesRequest: BlockIomadCompanyAdminCreateCompaniesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminCreateCompaniesRequest === null || blockIomadCompanyAdminCreateCompaniesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminCreateCompaniesRequest was null or undefined when calling blockIomadCompanyAdminCreateCompanies.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_create_companies`,
            blockIomadCompanyAdminCreateCompaniesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Create company licenses
     * Create company licenses
     * @param blockIomadCompanyAdminCreateLicensesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminCreateLicenses(blockIomadCompanyAdminCreateLicensesRequest: BlockIomadCompanyAdminCreateLicensesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminCreateLicenses(blockIomadCompanyAdminCreateLicensesRequest: BlockIomadCompanyAdminCreateLicensesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminCreateLicensesRequest === null || blockIomadCompanyAdminCreateLicensesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminCreateLicensesRequest was null or undefined when calling blockIomadCompanyAdminCreateLicenses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_create_licenses`,
            blockIomadCompanyAdminCreateLicensesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Delete company licenses
     * Delete company licenses
     * @param blockIomadCompanyAdminDeleteLicensesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminDeleteLicenses(blockIomadCompanyAdminDeleteLicensesRequest: BlockIomadCompanyAdminDeleteLicensesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminDeleteLicenses(blockIomadCompanyAdminDeleteLicensesRequest: BlockIomadCompanyAdminDeleteLicensesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminDeleteLicensesRequest === null || blockIomadCompanyAdminDeleteLicensesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminDeleteLicensesRequest was null or undefined when calling blockIomadCompanyAdminDeleteLicenses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_delete_licenses`,
            blockIomadCompanyAdminDeleteLicensesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Edit Iomad companies
     * Edit Iomad companies
     * @param blockIomadCompanyAdminEditCompaniesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminEditCompanies(blockIomadCompanyAdminEditCompaniesRequest: BlockIomadCompanyAdminEditCompaniesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminEditCompanies(blockIomadCompanyAdminEditCompaniesRequest: BlockIomadCompanyAdminEditCompaniesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminEditCompaniesRequest === null || blockIomadCompanyAdminEditCompaniesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminEditCompaniesRequest was null or undefined when calling blockIomadCompanyAdminEditCompanies.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_edit_companies`,
            blockIomadCompanyAdminEditCompaniesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Edit company license settings
     * Edit company license settings
     * @param blockIomadCompanyAdminEditLicensesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminEditLicenses(blockIomadCompanyAdminEditLicensesRequest: BlockIomadCompanyAdminEditLicensesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminEditLicenses(blockIomadCompanyAdminEditLicensesRequest: BlockIomadCompanyAdminEditLicensesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminEditLicensesRequest === null || blockIomadCompanyAdminEditLicensesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminEditLicensesRequest was null or undefined when calling blockIomadCompanyAdminEditLicenses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_edit_licenses`,
            blockIomadCompanyAdminEditLicensesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Assign users onto courses
     * Assign users onto courses
     * @param blockIomadCompanyAdminEnrolUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminEnrolUsers(blockIomadCompanyAdminEnrolUsersRequest: BlockIomadCompanyAdminEnrolUsersRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminEnrolUsers(blockIomadCompanyAdminEnrolUsersRequest: BlockIomadCompanyAdminEnrolUsersRequest, ): Observable<any> {

        if (blockIomadCompanyAdminEnrolUsersRequest === null || blockIomadCompanyAdminEnrolUsersRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminEnrolUsersRequest was null or undefined when calling blockIomadCompanyAdminEnrolUsers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_enrol_users`,
            blockIomadCompanyAdminEnrolUsersRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get all Iomad companies
     * Get all Iomad companies
     * @param blockIomadCompanyAdminGetCompaniesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminGetCompanies(blockIomadCompanyAdminGetCompaniesRequest: BlockIomadCompanyAdminGetCompaniesRequest, ): Observable<AxiosResponse<BlockIomadCompanyAdminGetCompanies200Response>>;
    public blockIomadCompanyAdminGetCompanies(blockIomadCompanyAdminGetCompaniesRequest: BlockIomadCompanyAdminGetCompaniesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminGetCompaniesRequest === null || blockIomadCompanyAdminGetCompaniesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminGetCompaniesRequest was null or undefined when calling blockIomadCompanyAdminGetCompanies.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<BlockIomadCompanyAdminGetCompanies200Response>(`${this.basePath}/block_iomad_company_admin_get_companies`,
            blockIomadCompanyAdminGetCompaniesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get Iomad company course allocations
     * Get Iomad company course allocations
     * @param blockIomadCompanyAdminGetCompanyCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminGetCompanyCourses(blockIomadCompanyAdminGetCompanyCoursesRequest: BlockIomadCompanyAdminGetCompanyCoursesRequest, ): Observable<AxiosResponse<BlockIomadCompanyAdminGetCompanyCourses200Response>>;
    public blockIomadCompanyAdminGetCompanyCourses(blockIomadCompanyAdminGetCompanyCoursesRequest: BlockIomadCompanyAdminGetCompanyCoursesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminGetCompanyCoursesRequest === null || blockIomadCompanyAdminGetCompanyCoursesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminGetCompanyCoursesRequest was null or undefined when calling blockIomadCompanyAdminGetCompanyCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<BlockIomadCompanyAdminGetCompanyCourses200Response>(`${this.basePath}/block_iomad_company_admin_get_company_courses`,
            blockIomadCompanyAdminGetCompanyCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get Iomad course settings
     * Get Iomad course settings
     * @param blockIomadCompanyAdminGetCourseInfoRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminGetCourseInfo(blockIomadCompanyAdminGetCourseInfoRequest: BlockIomadCompanyAdminGetCourseInfoRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminGetCourseInfo(blockIomadCompanyAdminGetCourseInfoRequest: BlockIomadCompanyAdminGetCourseInfoRequest, ): Observable<any> {

        if (blockIomadCompanyAdminGetCourseInfoRequest === null || blockIomadCompanyAdminGetCourseInfoRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminGetCourseInfoRequest was null or undefined when calling blockIomadCompanyAdminGetCourseInfo.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_get_course_info`,
            blockIomadCompanyAdminGetCourseInfoRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get users within a department
     * Get users within a department
     * @param blockIomadCompanyAdminGetDepartmentUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminGetDepartmentUsers(blockIomadCompanyAdminGetDepartmentUsersRequest: BlockIomadCompanyAdminGetDepartmentUsersRequest, ): Observable<AxiosResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response>>;
    public blockIomadCompanyAdminGetDepartmentUsers(blockIomadCompanyAdminGetDepartmentUsersRequest: BlockIomadCompanyAdminGetDepartmentUsersRequest, ): Observable<any> {

        if (blockIomadCompanyAdminGetDepartmentUsersRequest === null || blockIomadCompanyAdminGetDepartmentUsersRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminGetDepartmentUsersRequest was null or undefined when calling blockIomadCompanyAdminGetDepartmentUsers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<BlockIomadCompanyAdminGetDepartmentUsers200Response>(`${this.basePath}/block_iomad_company_admin_get_department_users`,
            blockIomadCompanyAdminGetDepartmentUsersRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get all company departments
     * Get all company departments
     * @param blockIomadCompanyAdminGetDepartmentsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminGetDepartments(blockIomadCompanyAdminGetDepartmentsRequest: BlockIomadCompanyAdminGetDepartmentsRequest, ): Observable<AxiosResponse<BlockIomadCompanyAdminGetDepartments200Response>>;
    public blockIomadCompanyAdminGetDepartments(blockIomadCompanyAdminGetDepartmentsRequest: BlockIomadCompanyAdminGetDepartmentsRequest, ): Observable<any> {

        if (blockIomadCompanyAdminGetDepartmentsRequest === null || blockIomadCompanyAdminGetDepartmentsRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminGetDepartmentsRequest was null or undefined when calling blockIomadCompanyAdminGetDepartments.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<BlockIomadCompanyAdminGetDepartments200Response>(`${this.basePath}/block_iomad_company_admin_get_departments`,
            blockIomadCompanyAdminGetDepartmentsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get licence data give the ID
     * Get licence data give the ID
     * @param blockIomadCompanyAdminGetLicenseFromIdRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminGetLicenseFromId(blockIomadCompanyAdminGetLicenseFromIdRequest: BlockIomadCompanyAdminGetLicenseFromIdRequest, ): Observable<AxiosResponse<BlockIomadCompanyAdminGetLicenseFromId200Response>>;
    public blockIomadCompanyAdminGetLicenseFromId(blockIomadCompanyAdminGetLicenseFromIdRequest: BlockIomadCompanyAdminGetLicenseFromIdRequest, ): Observable<any> {

        if (blockIomadCompanyAdminGetLicenseFromIdRequest === null || blockIomadCompanyAdminGetLicenseFromIdRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminGetLicenseFromIdRequest was null or undefined when calling blockIomadCompanyAdminGetLicenseFromId.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<BlockIomadCompanyAdminGetLicenseFromId200Response>(`${this.basePath}/block_iomad_company_admin_get_license_from_id`,
            blockIomadCompanyAdminGetLicenseFromIdRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get company license information
     * Get company license information
     * @param blockIomadCompanyAdminGetLicenseInfoRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminGetLicenseInfo(blockIomadCompanyAdminGetLicenseInfoRequest: BlockIomadCompanyAdminGetLicenseInfoRequest, ): Observable<AxiosResponse<BlockIomadCompanyAdminGetLicenseInfo200Response>>;
    public blockIomadCompanyAdminGetLicenseInfo(blockIomadCompanyAdminGetLicenseInfoRequest: BlockIomadCompanyAdminGetLicenseInfoRequest, ): Observable<any> {

        if (blockIomadCompanyAdminGetLicenseInfoRequest === null || blockIomadCompanyAdminGetLicenseInfoRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminGetLicenseInfoRequest was null or undefined when calling blockIomadCompanyAdminGetLicenseInfo.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<BlockIomadCompanyAdminGetLicenseInfo200Response>(`${this.basePath}/block_iomad_company_admin_get_license_info`,
            blockIomadCompanyAdminGetLicenseInfoRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Move users between departments
     * Move users between departments
     * @param blockIomadCompanyAdminMoveUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminMoveUsers(blockIomadCompanyAdminMoveUsersRequest: BlockIomadCompanyAdminMoveUsersRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminMoveUsers(blockIomadCompanyAdminMoveUsersRequest: BlockIomadCompanyAdminMoveUsersRequest, ): Observable<any> {

        if (blockIomadCompanyAdminMoveUsersRequest === null || blockIomadCompanyAdminMoveUsersRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminMoveUsersRequest was null or undefined when calling blockIomadCompanyAdminMoveUsers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_move_users`,
            blockIomadCompanyAdminMoveUsersRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * set/reset Iomad capability
     * set/reset Iomad capability
     * @param blockIomadCompanyAdminRestrictCapabilityRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminRestrictCapability(blockIomadCompanyAdminRestrictCapabilityRequest: BlockIomadCompanyAdminRestrictCapabilityRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminRestrictCapability(blockIomadCompanyAdminRestrictCapabilityRequest: BlockIomadCompanyAdminRestrictCapabilityRequest, ): Observable<any> {

        if (blockIomadCompanyAdminRestrictCapabilityRequest === null || blockIomadCompanyAdminRestrictCapabilityRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminRestrictCapabilityRequest was null or undefined when calling blockIomadCompanyAdminRestrictCapability.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_restrict_capability`,
            blockIomadCompanyAdminRestrictCapabilityRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Call update users to sync to external system
     * Call update users to sync to external system
     * @param blockIomadCompanyAdminSyncUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminSyncUsers(blockIomadCompanyAdminSyncUsersRequest: BlockIomadCompanyAdminSyncUsersRequest, ): Observable<AxiosResponse<BlockIomadCompanyAdminSyncUsers200Response>>;
    public blockIomadCompanyAdminSyncUsers(blockIomadCompanyAdminSyncUsersRequest: BlockIomadCompanyAdminSyncUsersRequest, ): Observable<any> {

        if (blockIomadCompanyAdminSyncUsersRequest === null || blockIomadCompanyAdminSyncUsersRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminSyncUsersRequest was null or undefined when calling blockIomadCompanyAdminSyncUsers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<BlockIomadCompanyAdminSyncUsers200Response>(`${this.basePath}/block_iomad_company_admin_sync_users`,
            blockIomadCompanyAdminSyncUsersRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Remove course licenses from users
     * Remove course licenses from users
     * @param blockIomadCompanyAdminUnallocateLicensesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminUnallocateLicenses(blockIomadCompanyAdminUnallocateLicensesRequest: BlockIomadCompanyAdminUnallocateLicensesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminUnallocateLicenses(blockIomadCompanyAdminUnallocateLicensesRequest: BlockIomadCompanyAdminUnallocateLicensesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminUnallocateLicensesRequest === null || blockIomadCompanyAdminUnallocateLicensesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminUnallocateLicensesRequest was null or undefined when calling blockIomadCompanyAdminUnallocateLicenses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_unallocate_licenses`,
            blockIomadCompanyAdminUnallocateLicensesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Unassign a course from a company
     * Unassign a course from a company
     * @param blockIomadCompanyAdminUnassignCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminUnassignCourses(blockIomadCompanyAdminUnassignCoursesRequest: BlockIomadCompanyAdminUnassignCoursesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminUnassignCourses(blockIomadCompanyAdminUnassignCoursesRequest: BlockIomadCompanyAdminUnassignCoursesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminUnassignCoursesRequest === null || blockIomadCompanyAdminUnassignCoursesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminUnassignCoursesRequest was null or undefined when calling blockIomadCompanyAdminUnassignCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_unassign_courses`,
            blockIomadCompanyAdminUnassignCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Unassign users from a company
     * Unassign users from a company
     * @param blockIomadCompanyAdminUnassignUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminUnassignUsers(blockIomadCompanyAdminUnassignUsersRequest: BlockIomadCompanyAdminUnassignUsersRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminUnassignUsers(blockIomadCompanyAdminUnassignUsersRequest: BlockIomadCompanyAdminUnassignUsersRequest, ): Observable<any> {

        if (blockIomadCompanyAdminUnassignUsersRequest === null || blockIomadCompanyAdminUnassignUsersRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminUnassignUsersRequest was null or undefined when calling blockIomadCompanyAdminUnassignUsers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_unassign_users`,
            blockIomadCompanyAdminUnassignUsersRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Update Iomad course settings
     * Update Iomad course settings
     * @param blockIomadCompanyAdminUpdateCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blockIomadCompanyAdminUpdateCourses(blockIomadCompanyAdminUpdateCoursesRequest: BlockIomadCompanyAdminUpdateCoursesRequest, ): Observable<AxiosResponse<object>>;
    public blockIomadCompanyAdminUpdateCourses(blockIomadCompanyAdminUpdateCoursesRequest: BlockIomadCompanyAdminUpdateCoursesRequest, ): Observable<any> {

        if (blockIomadCompanyAdminUpdateCoursesRequest === null || blockIomadCompanyAdminUpdateCoursesRequest === undefined) {
            throw new Error('Required parameter blockIomadCompanyAdminUpdateCoursesRequest was null or undefined when calling blockIomadCompanyAdminUpdateCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/block_iomad_company_admin_update_courses`,
            blockIomadCompanyAdminUpdateCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
