/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { CoreContentbankRenameContent200Response } from '../model/core-contentbank-rename-content-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModChatGetChatsByCoursesRequest } from '../model/mod-chat-get-chats-by-courses-request';
import { ModDataAddEntry200Response } from '../model/mod-data-add-entry-200-response';
import { ModDataAddEntryRequest } from '../model/mod-data-add-entry-request';
import { ModDataApproveEntryRequest } from '../model/mod-data-approve-entry-request';
import { ModDataDeleteEntry200Response } from '../model/mod-data-delete-entry-200-response';
import { ModDataDeleteEntryRequest } from '../model/mod-data-delete-entry-request';
import { ModDataDeleteSavedPresetRequest } from '../model/mod-data-delete-saved-preset-request';
import { ModDataGetDataAccessInformation200Response } from '../model/mod-data-get-data-access-information-200-response';
import { ModDataGetDataAccessInformationRequest } from '../model/mod-data-get-data-access-information-request';
import { ModDataGetDatabasesByCourses200Response } from '../model/mod-data-get-databases-by-courses-200-response';
import { ModDataGetEntries200Response } from '../model/mod-data-get-entries-200-response';
import { ModDataGetEntriesRequest } from '../model/mod-data-get-entries-request';
import { ModDataGetEntry200Response } from '../model/mod-data-get-entry-200-response';
import { ModDataGetEntryRequest } from '../model/mod-data-get-entry-request';
import { ModDataGetFields200Response } from '../model/mod-data-get-fields-200-response';
import { ModDataGetFieldsRequest } from '../model/mod-data-get-fields-request';
import { ModDataGetMappingInformation200Response } from '../model/mod-data-get-mapping-information-200-response';
import { ModDataGetMappingInformationRequest } from '../model/mod-data-get-mapping-information-request';
import { ModDataSearchEntries200Response } from '../model/mod-data-search-entries-200-response';
import { ModDataSearchEntriesRequest } from '../model/mod-data-search-entries-request';
import { ModDataUpdateEntry200Response } from '../model/mod-data-update-entry-200-response';
import { ModDataUpdateEntryRequest } from '../model/mod-data-update-entry-request';
import { ModDataViewDatabaseRequest } from '../model/mod-data-view-database-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModDataService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Adds a new entry.
     * Adds a new entry.
     * @param modDataAddEntryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataAddEntry(modDataAddEntryRequest: ModDataAddEntryRequest, ): Observable<AxiosResponse<ModDataAddEntry200Response>>;
    public modDataAddEntry(modDataAddEntryRequest: ModDataAddEntryRequest, ): Observable<any> {

        if (modDataAddEntryRequest === null || modDataAddEntryRequest === undefined) {
            throw new Error('Required parameter modDataAddEntryRequest was null or undefined when calling modDataAddEntry.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataAddEntry200Response>(`${this.basePath}/mod_data_add_entry`,
            modDataAddEntryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Approves or unapproves an entry.
     * Approves or unapproves an entry.
     * @param modDataApproveEntryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataApproveEntry(modDataApproveEntryRequest: ModDataApproveEntryRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modDataApproveEntry(modDataApproveEntryRequest: ModDataApproveEntryRequest, ): Observable<any> {

        if (modDataApproveEntryRequest === null || modDataApproveEntryRequest === undefined) {
            throw new Error('Required parameter modDataApproveEntryRequest was null or undefined when calling modDataApproveEntry.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_data_approve_entry`,
            modDataApproveEntryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Deletes an entry.
     * Deletes an entry.
     * @param modDataDeleteEntryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataDeleteEntry(modDataDeleteEntryRequest: ModDataDeleteEntryRequest, ): Observable<AxiosResponse<ModDataDeleteEntry200Response>>;
    public modDataDeleteEntry(modDataDeleteEntryRequest: ModDataDeleteEntryRequest, ): Observable<any> {

        if (modDataDeleteEntryRequest === null || modDataDeleteEntryRequest === undefined) {
            throw new Error('Required parameter modDataDeleteEntryRequest was null or undefined when calling modDataDeleteEntry.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataDeleteEntry200Response>(`${this.basePath}/mod_data_delete_entry`,
            modDataDeleteEntryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Delete site user preset.
     * Delete site user preset.
     * @param modDataDeleteSavedPresetRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataDeleteSavedPreset(modDataDeleteSavedPresetRequest: ModDataDeleteSavedPresetRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public modDataDeleteSavedPreset(modDataDeleteSavedPresetRequest: ModDataDeleteSavedPresetRequest, ): Observable<any> {

        if (modDataDeleteSavedPresetRequest === null || modDataDeleteSavedPresetRequest === undefined) {
            throw new Error('Required parameter modDataDeleteSavedPresetRequest was null or undefined when calling modDataDeleteSavedPreset.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/mod_data_delete_saved_preset`,
            modDataDeleteSavedPresetRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return access information for a given database.
     * Return access information for a given database.
     * @param modDataGetDataAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataGetDataAccessInformation(modDataGetDataAccessInformationRequest: ModDataGetDataAccessInformationRequest, ): Observable<AxiosResponse<ModDataGetDataAccessInformation200Response>>;
    public modDataGetDataAccessInformation(modDataGetDataAccessInformationRequest: ModDataGetDataAccessInformationRequest, ): Observable<any> {

        if (modDataGetDataAccessInformationRequest === null || modDataGetDataAccessInformationRequest === undefined) {
            throw new Error('Required parameter modDataGetDataAccessInformationRequest was null or undefined when calling modDataGetDataAccessInformation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataGetDataAccessInformation200Response>(`${this.basePath}/mod_data_get_data_access_information`,
            modDataGetDataAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataGetDatabasesByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<AxiosResponse<ModDataGetDatabasesByCourses200Response>>;
    public modDataGetDatabasesByCourses(modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest, ): Observable<any> {

        if (modChatGetChatsByCoursesRequest === null || modChatGetChatsByCoursesRequest === undefined) {
            throw new Error('Required parameter modChatGetChatsByCoursesRequest was null or undefined when calling modDataGetDatabasesByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataGetDatabasesByCourses200Response>(`${this.basePath}/mod_data_get_databases_by_courses`,
            modChatGetChatsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the complete list of entries of the given database.
     * Return the complete list of entries of the given database.
     * @param modDataGetEntriesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataGetEntries(modDataGetEntriesRequest: ModDataGetEntriesRequest, ): Observable<AxiosResponse<ModDataGetEntries200Response>>;
    public modDataGetEntries(modDataGetEntriesRequest: ModDataGetEntriesRequest, ): Observable<any> {

        if (modDataGetEntriesRequest === null || modDataGetEntriesRequest === undefined) {
            throw new Error('Required parameter modDataGetEntriesRequest was null or undefined when calling modDataGetEntries.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataGetEntries200Response>(`${this.basePath}/mod_data_get_entries`,
            modDataGetEntriesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return one entry record from the database, including contents optionally.
     * Return one entry record from the database, including contents optionally.
     * @param modDataGetEntryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataGetEntry(modDataGetEntryRequest: ModDataGetEntryRequest, ): Observable<AxiosResponse<ModDataGetEntry200Response>>;
    public modDataGetEntry(modDataGetEntryRequest: ModDataGetEntryRequest, ): Observable<any> {

        if (modDataGetEntryRequest === null || modDataGetEntryRequest === undefined) {
            throw new Error('Required parameter modDataGetEntryRequest was null or undefined when calling modDataGetEntry.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataGetEntry200Response>(`${this.basePath}/mod_data_get_entry`,
            modDataGetEntryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the list of configured fields for the given database.
     * Return the list of configured fields for the given database.
     * @param modDataGetFieldsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataGetFields(modDataGetFieldsRequest: ModDataGetFieldsRequest, ): Observable<AxiosResponse<ModDataGetFields200Response>>;
    public modDataGetFields(modDataGetFieldsRequest: ModDataGetFieldsRequest, ): Observable<any> {

        if (modDataGetFieldsRequest === null || modDataGetFieldsRequest === undefined) {
            throw new Error('Required parameter modDataGetFieldsRequest was null or undefined when calling modDataGetFields.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataGetFields200Response>(`${this.basePath}/mod_data_get_fields`,
            modDataGetFieldsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get importing information
     * Get importing information
     * @param modDataGetMappingInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataGetMappingInformation(modDataGetMappingInformationRequest: ModDataGetMappingInformationRequest, ): Observable<AxiosResponse<ModDataGetMappingInformation200Response>>;
    public modDataGetMappingInformation(modDataGetMappingInformationRequest: ModDataGetMappingInformationRequest, ): Observable<any> {

        if (modDataGetMappingInformationRequest === null || modDataGetMappingInformationRequest === undefined) {
            throw new Error('Required parameter modDataGetMappingInformationRequest was null or undefined when calling modDataGetMappingInformation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataGetMappingInformation200Response>(`${this.basePath}/mod_data_get_mapping_information`,
            modDataGetMappingInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Search for entries in the given database.
     * Search for entries in the given database.
     * @param modDataSearchEntriesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataSearchEntries(modDataSearchEntriesRequest: ModDataSearchEntriesRequest, ): Observable<AxiosResponse<ModDataSearchEntries200Response>>;
    public modDataSearchEntries(modDataSearchEntriesRequest: ModDataSearchEntriesRequest, ): Observable<any> {

        if (modDataSearchEntriesRequest === null || modDataSearchEntriesRequest === undefined) {
            throw new Error('Required parameter modDataSearchEntriesRequest was null or undefined when calling modDataSearchEntries.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataSearchEntries200Response>(`${this.basePath}/mod_data_search_entries`,
            modDataSearchEntriesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Updates an existing entry.
     * Updates an existing entry.
     * @param modDataUpdateEntryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataUpdateEntry(modDataUpdateEntryRequest: ModDataUpdateEntryRequest, ): Observable<AxiosResponse<ModDataUpdateEntry200Response>>;
    public modDataUpdateEntry(modDataUpdateEntryRequest: ModDataUpdateEntryRequest, ): Observable<any> {

        if (modDataUpdateEntryRequest === null || modDataUpdateEntryRequest === undefined) {
            throw new Error('Required parameter modDataUpdateEntryRequest was null or undefined when calling modDataUpdateEntry.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModDataUpdateEntry200Response>(`${this.basePath}/mod_data_update_entry`,
            modDataUpdateEntryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Simulate the view.php web interface data: trigger events, completion, etc...
     * Simulate the view.php web interface data: trigger events, completion, etc...
     * @param modDataViewDatabaseRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modDataViewDatabase(modDataViewDatabaseRequest: ModDataViewDatabaseRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modDataViewDatabase(modDataViewDatabaseRequest: ModDataViewDatabaseRequest, ): Observable<any> {

        if (modDataViewDatabaseRequest === null || modDataViewDatabaseRequest === undefined) {
            throw new Error('Required parameter modDataViewDatabaseRequest was null or undefined when calling modDataViewDatabase.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_data_view_database`,
            modDataViewDatabaseRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
