/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreContentbankRenameContent200Response } from '../model/core-contentbank-rename-content-200-response';
import { ErrorResponse } from '../model/error-response';
import { ToolDataprivacyApproveDataRequestRequest } from '../model/tool-dataprivacy-approve-data-request-request';
import { ToolDataprivacyBulkApproveDataRequestsRequest } from '../model/tool-dataprivacy-bulk-approve-data-requests-request';
import { ToolDataprivacyBulkDenyDataRequestsRequest } from '../model/tool-dataprivacy-bulk-deny-data-requests-request';
import { ToolDataprivacyCancelDataRequestRequest } from '../model/tool-dataprivacy-cancel-data-request-request';
import { ToolDataprivacyConfirmContextsForDeletion200Response } from '../model/tool-dataprivacy-confirm-contexts-for-deletion-200-response';
import { ToolDataprivacyConfirmContextsForDeletionRequest } from '../model/tool-dataprivacy-confirm-contexts-for-deletion-request';
import { ToolDataprivacyContactDpoRequest } from '../model/tool-dataprivacy-contact-dpo-request';
import { ToolDataprivacyCreateCategoryForm200Response } from '../model/tool-dataprivacy-create-category-form-200-response';
import { ToolDataprivacyCreateCategoryFormRequest } from '../model/tool-dataprivacy-create-category-form-request';
import { ToolDataprivacyCreatePurposeForm200Response } from '../model/tool-dataprivacy-create-purpose-form-200-response';
import { ToolDataprivacyCreatePurposeFormRequest } from '../model/tool-dataprivacy-create-purpose-form-request';
import { ToolDataprivacyDeleteCategoryRequest } from '../model/tool-dataprivacy-delete-category-request';
import { ToolDataprivacyDeletePurposeRequest } from '../model/tool-dataprivacy-delete-purpose-request';
import { ToolDataprivacyGetActivityOptions200Response } from '../model/tool-dataprivacy-get-activity-options-200-response';
import { ToolDataprivacyGetActivityOptionsRequest } from '../model/tool-dataprivacy-get-activity-options-request';
import { ToolDataprivacyGetCategoryOptions200Response } from '../model/tool-dataprivacy-get-category-options-200-response';
import { ToolDataprivacyGetCategoryOptionsRequest } from '../model/tool-dataprivacy-get-category-options-request';
import { ToolDataprivacyGetDataRequest200Response } from '../model/tool-dataprivacy-get-data-request-200-response';
import { ToolDataprivacyGetPurposeOptions200Response } from '../model/tool-dataprivacy-get-purpose-options-200-response';
import { ToolDataprivacyGetUsersRequest } from '../model/tool-dataprivacy-get-users-request';
import { ToolDataprivacySetContextDefaults200Response } from '../model/tool-dataprivacy-set-context-defaults-200-response';
import { ToolDataprivacySetContextDefaultsRequest } from '../model/tool-dataprivacy-set-context-defaults-request';
import { ToolDataprivacySetContextForm200Response } from '../model/tool-dataprivacy-set-context-form-200-response';
import { ToolDataprivacySetContextFormRequest } from '../model/tool-dataprivacy-set-context-form-request';
import { ToolDataprivacySetContextlevelForm200Response } from '../model/tool-dataprivacy-set-contextlevel-form-200-response';
import { ToolDataprivacySetContextlevelFormRequest } from '../model/tool-dataprivacy-set-contextlevel-form-request';
import { ToolDataprivacySubmitSelectedCoursesFormRequest } from '../model/tool-dataprivacy-submit-selected-courses-form-request';
import { ToolDataprivacyTreeExtraBranches200Response } from '../model/tool-dataprivacy-tree-extra-branches-200-response';
import { ToolDataprivacyTreeExtraBranchesRequest } from '../model/tool-dataprivacy-tree-extra-branches-request';
import { Configuration } from '../configuration';


@Injectable()
export class ToolDataprivacyService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Approve a data request
     * Approve a data request
     * @param toolDataprivacyApproveDataRequestRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyApproveDataRequest(toolDataprivacyApproveDataRequestRequest: ToolDataprivacyApproveDataRequestRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacyApproveDataRequest(toolDataprivacyApproveDataRequestRequest: ToolDataprivacyApproveDataRequestRequest, ): Observable<any> {

        if (toolDataprivacyApproveDataRequestRequest === null || toolDataprivacyApproveDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyApproveDataRequestRequest was null or undefined when calling toolDataprivacyApproveDataRequest.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_approve_data_request`,
            toolDataprivacyApproveDataRequestRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Bulk approve data requests
     * Bulk approve data requests
     * @param toolDataprivacyBulkApproveDataRequestsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyBulkApproveDataRequests(toolDataprivacyBulkApproveDataRequestsRequest: ToolDataprivacyBulkApproveDataRequestsRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacyBulkApproveDataRequests(toolDataprivacyBulkApproveDataRequestsRequest: ToolDataprivacyBulkApproveDataRequestsRequest, ): Observable<any> {

        if (toolDataprivacyBulkApproveDataRequestsRequest === null || toolDataprivacyBulkApproveDataRequestsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyBulkApproveDataRequestsRequest was null or undefined when calling toolDataprivacyBulkApproveDataRequests.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_bulk_approve_data_requests`,
            toolDataprivacyBulkApproveDataRequestsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Bulk deny data requests
     * Bulk deny data requests
     * @param toolDataprivacyBulkDenyDataRequestsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyBulkDenyDataRequests(toolDataprivacyBulkDenyDataRequestsRequest: ToolDataprivacyBulkDenyDataRequestsRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacyBulkDenyDataRequests(toolDataprivacyBulkDenyDataRequestsRequest: ToolDataprivacyBulkDenyDataRequestsRequest, ): Observable<any> {

        if (toolDataprivacyBulkDenyDataRequestsRequest === null || toolDataprivacyBulkDenyDataRequestsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyBulkDenyDataRequestsRequest was null or undefined when calling toolDataprivacyBulkDenyDataRequests.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_bulk_deny_data_requests`,
            toolDataprivacyBulkDenyDataRequestsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Cancel the data request made by the user
     * Cancel the data request made by the user
     * @param toolDataprivacyCancelDataRequestRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyCancelDataRequest(toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacyCancelDataRequest(toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, ): Observable<any> {

        if (toolDataprivacyCancelDataRequestRequest === null || toolDataprivacyCancelDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCancelDataRequestRequest was null or undefined when calling toolDataprivacyCancelDataRequest.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_cancel_data_request`,
            toolDataprivacyCancelDataRequestRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Mark the selected expired contexts as confirmed for deletion
     * Mark the selected expired contexts as confirmed for deletion
     * @param toolDataprivacyConfirmContextsForDeletionRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyConfirmContextsForDeletion(toolDataprivacyConfirmContextsForDeletionRequest: ToolDataprivacyConfirmContextsForDeletionRequest, ): Observable<AxiosResponse<ToolDataprivacyConfirmContextsForDeletion200Response>>;
    public toolDataprivacyConfirmContextsForDeletion(toolDataprivacyConfirmContextsForDeletionRequest: ToolDataprivacyConfirmContextsForDeletionRequest, ): Observable<any> {

        if (toolDataprivacyConfirmContextsForDeletionRequest === null || toolDataprivacyConfirmContextsForDeletionRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyConfirmContextsForDeletionRequest was null or undefined when calling toolDataprivacyConfirmContextsForDeletion.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacyConfirmContextsForDeletion200Response>(`${this.basePath}/tool_dataprivacy_confirm_contexts_for_deletion`,
            toolDataprivacyConfirmContextsForDeletionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Contact the site Data Protection Officer(s)
     * Contact the site Data Protection Officer(s)
     * @param toolDataprivacyContactDpoRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyContactDpo(toolDataprivacyContactDpoRequest: ToolDataprivacyContactDpoRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacyContactDpo(toolDataprivacyContactDpoRequest: ToolDataprivacyContactDpoRequest, ): Observable<any> {

        if (toolDataprivacyContactDpoRequest === null || toolDataprivacyContactDpoRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyContactDpoRequest was null or undefined when calling toolDataprivacyContactDpo.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_contact_dpo`,
            toolDataprivacyContactDpoRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Adds a data category
     * Adds a data category
     * @param toolDataprivacyCreateCategoryFormRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyCreateCategoryForm(toolDataprivacyCreateCategoryFormRequest: ToolDataprivacyCreateCategoryFormRequest, ): Observable<AxiosResponse<ToolDataprivacyCreateCategoryForm200Response>>;
    public toolDataprivacyCreateCategoryForm(toolDataprivacyCreateCategoryFormRequest: ToolDataprivacyCreateCategoryFormRequest, ): Observable<any> {

        if (toolDataprivacyCreateCategoryFormRequest === null || toolDataprivacyCreateCategoryFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCreateCategoryFormRequest was null or undefined when calling toolDataprivacyCreateCategoryForm.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacyCreateCategoryForm200Response>(`${this.basePath}/tool_dataprivacy_create_category_form`,
            toolDataprivacyCreateCategoryFormRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Adds a data purpose
     * Adds a data purpose
     * @param toolDataprivacyCreatePurposeFormRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyCreatePurposeForm(toolDataprivacyCreatePurposeFormRequest: ToolDataprivacyCreatePurposeFormRequest, ): Observable<AxiosResponse<ToolDataprivacyCreatePurposeForm200Response>>;
    public toolDataprivacyCreatePurposeForm(toolDataprivacyCreatePurposeFormRequest: ToolDataprivacyCreatePurposeFormRequest, ): Observable<any> {

        if (toolDataprivacyCreatePurposeFormRequest === null || toolDataprivacyCreatePurposeFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCreatePurposeFormRequest was null or undefined when calling toolDataprivacyCreatePurposeForm.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacyCreatePurposeForm200Response>(`${this.basePath}/tool_dataprivacy_create_purpose_form`,
            toolDataprivacyCreatePurposeFormRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Deletes an existing data category
     * Deletes an existing data category
     * @param toolDataprivacyDeleteCategoryRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyDeleteCategory(toolDataprivacyDeleteCategoryRequest: ToolDataprivacyDeleteCategoryRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacyDeleteCategory(toolDataprivacyDeleteCategoryRequest: ToolDataprivacyDeleteCategoryRequest, ): Observable<any> {

        if (toolDataprivacyDeleteCategoryRequest === null || toolDataprivacyDeleteCategoryRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyDeleteCategoryRequest was null or undefined when calling toolDataprivacyDeleteCategory.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_delete_category`,
            toolDataprivacyDeleteCategoryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Deletes an existing data purpose
     * Deletes an existing data purpose
     * @param toolDataprivacyDeletePurposeRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyDeletePurpose(toolDataprivacyDeletePurposeRequest: ToolDataprivacyDeletePurposeRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacyDeletePurpose(toolDataprivacyDeletePurposeRequest: ToolDataprivacyDeletePurposeRequest, ): Observable<any> {

        if (toolDataprivacyDeletePurposeRequest === null || toolDataprivacyDeletePurposeRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyDeletePurposeRequest was null or undefined when calling toolDataprivacyDeletePurpose.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_delete_purpose`,
            toolDataprivacyDeletePurposeRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Deny a data request
     * Deny a data request
     * @param toolDataprivacyCancelDataRequestRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyDenyDataRequest(toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacyDenyDataRequest(toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, ): Observable<any> {

        if (toolDataprivacyCancelDataRequestRequest === null || toolDataprivacyCancelDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCancelDataRequestRequest was null or undefined when calling toolDataprivacyDenyDataRequest.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_deny_data_request`,
            toolDataprivacyCancelDataRequestRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Fetches a list of activity options
     * Fetches a list of activity options
     * @param toolDataprivacyGetActivityOptionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyGetActivityOptions(toolDataprivacyGetActivityOptionsRequest: ToolDataprivacyGetActivityOptionsRequest, ): Observable<AxiosResponse<ToolDataprivacyGetActivityOptions200Response>>;
    public toolDataprivacyGetActivityOptions(toolDataprivacyGetActivityOptionsRequest: ToolDataprivacyGetActivityOptionsRequest, ): Observable<any> {

        if (toolDataprivacyGetActivityOptionsRequest === null || toolDataprivacyGetActivityOptionsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyGetActivityOptionsRequest was null or undefined when calling toolDataprivacyGetActivityOptions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacyGetActivityOptions200Response>(`${this.basePath}/tool_dataprivacy_get_activity_options`,
            toolDataprivacyGetActivityOptionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Fetches a list of data category options
     * Fetches a list of data category options
     * @param toolDataprivacyGetCategoryOptionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyGetCategoryOptions(toolDataprivacyGetCategoryOptionsRequest: ToolDataprivacyGetCategoryOptionsRequest, ): Observable<AxiosResponse<ToolDataprivacyGetCategoryOptions200Response>>;
    public toolDataprivacyGetCategoryOptions(toolDataprivacyGetCategoryOptionsRequest: ToolDataprivacyGetCategoryOptionsRequest, ): Observable<any> {

        if (toolDataprivacyGetCategoryOptionsRequest === null || toolDataprivacyGetCategoryOptionsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyGetCategoryOptionsRequest was null or undefined when calling toolDataprivacyGetCategoryOptions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacyGetCategoryOptions200Response>(`${this.basePath}/tool_dataprivacy_get_category_options`,
            toolDataprivacyGetCategoryOptionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Fetch the details of a user\&#39;s data request
     * Fetch the details of a user\&#39;s data request
     * @param toolDataprivacyCancelDataRequestRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyGetDataRequest(toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, ): Observable<AxiosResponse<ToolDataprivacyGetDataRequest200Response>>;
    public toolDataprivacyGetDataRequest(toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, ): Observable<any> {

        if (toolDataprivacyCancelDataRequestRequest === null || toolDataprivacyCancelDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCancelDataRequestRequest was null or undefined when calling toolDataprivacyGetDataRequest.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacyGetDataRequest200Response>(`${this.basePath}/tool_dataprivacy_get_data_request`,
            toolDataprivacyCancelDataRequestRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Fetches a list of data storage purpose options
     * Fetches a list of data storage purpose options
     * @param toolDataprivacyGetCategoryOptionsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyGetPurposeOptions(toolDataprivacyGetCategoryOptionsRequest: ToolDataprivacyGetCategoryOptionsRequest, ): Observable<AxiosResponse<ToolDataprivacyGetPurposeOptions200Response>>;
    public toolDataprivacyGetPurposeOptions(toolDataprivacyGetCategoryOptionsRequest: ToolDataprivacyGetCategoryOptionsRequest, ): Observable<any> {

        if (toolDataprivacyGetCategoryOptionsRequest === null || toolDataprivacyGetCategoryOptionsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyGetCategoryOptionsRequest was null or undefined when calling toolDataprivacyGetPurposeOptions.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacyGetPurposeOptions200Response>(`${this.basePath}/tool_dataprivacy_get_purpose_options`,
            toolDataprivacyGetCategoryOptionsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Fetches a list of users
     * Fetches a list of users
     * @param toolDataprivacyGetUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyGetUsers(toolDataprivacyGetUsersRequest: ToolDataprivacyGetUsersRequest, ): Observable<AxiosResponse<object>>;
    public toolDataprivacyGetUsers(toolDataprivacyGetUsersRequest: ToolDataprivacyGetUsersRequest, ): Observable<any> {

        if (toolDataprivacyGetUsersRequest === null || toolDataprivacyGetUsersRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyGetUsersRequest was null or undefined when calling toolDataprivacyGetUsers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<object>(`${this.basePath}/tool_dataprivacy_get_users`,
            toolDataprivacyGetUsersRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Mark a user\&#39;s general enquiry as complete
     * Mark a user\&#39;s general enquiry as complete
     * @param toolDataprivacyCancelDataRequestRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyMarkComplete(toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacyMarkComplete(toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, ): Observable<any> {

        if (toolDataprivacyCancelDataRequestRequest === null || toolDataprivacyCancelDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCancelDataRequestRequest was null or undefined when calling toolDataprivacyMarkComplete.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_mark_complete`,
            toolDataprivacyCancelDataRequestRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * @param toolDataprivacySetContextDefaultsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacySetContextDefaults(toolDataprivacySetContextDefaultsRequest: ToolDataprivacySetContextDefaultsRequest, ): Observable<AxiosResponse<ToolDataprivacySetContextDefaults200Response>>;
    public toolDataprivacySetContextDefaults(toolDataprivacySetContextDefaultsRequest: ToolDataprivacySetContextDefaultsRequest, ): Observable<any> {

        if (toolDataprivacySetContextDefaultsRequest === null || toolDataprivacySetContextDefaultsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacySetContextDefaultsRequest was null or undefined when calling toolDataprivacySetContextDefaults.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacySetContextDefaults200Response>(`${this.basePath}/tool_dataprivacy_set_context_defaults`,
            toolDataprivacySetContextDefaultsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Sets purpose and category for a specific context
     * Sets purpose and category for a specific context
     * @param toolDataprivacySetContextFormRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacySetContextForm(toolDataprivacySetContextFormRequest: ToolDataprivacySetContextFormRequest, ): Observable<AxiosResponse<ToolDataprivacySetContextForm200Response>>;
    public toolDataprivacySetContextForm(toolDataprivacySetContextFormRequest: ToolDataprivacySetContextFormRequest, ): Observable<any> {

        if (toolDataprivacySetContextFormRequest === null || toolDataprivacySetContextFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacySetContextFormRequest was null or undefined when calling toolDataprivacySetContextForm.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacySetContextForm200Response>(`${this.basePath}/tool_dataprivacy_set_context_form`,
            toolDataprivacySetContextFormRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Sets purpose and category across a context level
     * Sets purpose and category across a context level
     * @param toolDataprivacySetContextlevelFormRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacySetContextlevelForm(toolDataprivacySetContextlevelFormRequest: ToolDataprivacySetContextlevelFormRequest, ): Observable<AxiosResponse<ToolDataprivacySetContextlevelForm200Response>>;
    public toolDataprivacySetContextlevelForm(toolDataprivacySetContextlevelFormRequest: ToolDataprivacySetContextlevelFormRequest, ): Observable<any> {

        if (toolDataprivacySetContextlevelFormRequest === null || toolDataprivacySetContextlevelFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacySetContextlevelFormRequest was null or undefined when calling toolDataprivacySetContextlevelForm.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacySetContextlevelForm200Response>(`${this.basePath}/tool_dataprivacy_set_contextlevel_form`,
            toolDataprivacySetContextlevelFormRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Save list of selected courses for export
     * Save list of selected courses for export
     * @param toolDataprivacySubmitSelectedCoursesFormRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacySubmitSelectedCoursesForm(toolDataprivacySubmitSelectedCoursesFormRequest: ToolDataprivacySubmitSelectedCoursesFormRequest, ): Observable<AxiosResponse<CoreContentbankRenameContent200Response>>;
    public toolDataprivacySubmitSelectedCoursesForm(toolDataprivacySubmitSelectedCoursesFormRequest: ToolDataprivacySubmitSelectedCoursesFormRequest, ): Observable<any> {

        if (toolDataprivacySubmitSelectedCoursesFormRequest === null || toolDataprivacySubmitSelectedCoursesFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacySubmitSelectedCoursesFormRequest was null or undefined when calling toolDataprivacySubmitSelectedCoursesForm.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreContentbankRenameContent200Response>(`${this.basePath}/tool_dataprivacy_submit_selected_courses_form`,
            toolDataprivacySubmitSelectedCoursesFormRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return branches for the context tree
     * Return branches for the context tree
     * @param toolDataprivacyTreeExtraBranchesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toolDataprivacyTreeExtraBranches(toolDataprivacyTreeExtraBranchesRequest: ToolDataprivacyTreeExtraBranchesRequest, ): Observable<AxiosResponse<ToolDataprivacyTreeExtraBranches200Response>>;
    public toolDataprivacyTreeExtraBranches(toolDataprivacyTreeExtraBranchesRequest: ToolDataprivacyTreeExtraBranchesRequest, ): Observable<any> {

        if (toolDataprivacyTreeExtraBranchesRequest === null || toolDataprivacyTreeExtraBranchesRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyTreeExtraBranchesRequest was null or undefined when calling toolDataprivacyTreeExtraBranches.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ToolDataprivacyTreeExtraBranches200Response>(`${this.basePath}/tool_dataprivacy_tree_extra_branches`,
            toolDataprivacyTreeExtraBranchesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
