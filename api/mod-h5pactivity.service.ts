/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CoreCalendarDeleteSubscription200Response } from '../model/core-calendar-delete-subscription-200-response';
import { ErrorResponse } from '../model/error-response';
import { ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest } from '../model/mod-bigbluebuttonbn-get-bigbluebuttonbns-by-courses-request';
import { ModH5pactivityGetAttempts200Response } from '../model/mod-h5pactivity-get-attempts-200-response';
import { ModH5pactivityGetAttemptsRequest } from '../model/mod-h5pactivity-get-attempts-request';
import { ModH5pactivityGetH5pactivitiesByCourses200Response } from '../model/mod-h5pactivity-get-h5pactivities-by-courses-200-response';
import { ModH5pactivityGetH5pactivityAccessInformation200Response } from '../model/mod-h5pactivity-get-h5pactivity-access-information-200-response';
import { ModH5pactivityGetH5pactivityAccessInformationRequest } from '../model/mod-h5pactivity-get-h5pactivity-access-information-request';
import { ModH5pactivityGetResults200Response } from '../model/mod-h5pactivity-get-results-200-response';
import { ModH5pactivityGetResultsRequest } from '../model/mod-h5pactivity-get-results-request';
import { ModH5pactivityGetUserAttempts200Response } from '../model/mod-h5pactivity-get-user-attempts-200-response';
import { ModH5pactivityGetUserAttemptsRequest } from '../model/mod-h5pactivity-get-user-attempts-request';
import { ModH5pactivityLogReportViewedRequest } from '../model/mod-h5pactivity-log-report-viewed-request';
import { ModH5pactivityViewH5pactivityRequest } from '../model/mod-h5pactivity-view-h5pactivity-request';
import { Configuration } from '../configuration';


@Injectable()
export class ModH5pactivityService {

    protected basePath = 'https://localhost/webservice/restful/server.php';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Return the information needed to list a user attempts.
     * Return the information needed to list a user attempts.
     * @param modH5pactivityGetAttemptsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modH5pactivityGetAttempts(modH5pactivityGetAttemptsRequest: ModH5pactivityGetAttemptsRequest, ): Observable<AxiosResponse<ModH5pactivityGetAttempts200Response>>;
    public modH5pactivityGetAttempts(modH5pactivityGetAttemptsRequest: ModH5pactivityGetAttemptsRequest, ): Observable<any> {

        if (modH5pactivityGetAttemptsRequest === null || modH5pactivityGetAttemptsRequest === undefined) {
            throw new Error('Required parameter modH5pactivityGetAttemptsRequest was null or undefined when calling modH5pactivityGetAttempts.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModH5pactivityGetAttempts200Response>(`${this.basePath}/mod_h5pactivity_get_attempts`,
            modH5pactivityGetAttemptsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
     * Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modH5pactivityGetH5pactivitiesByCourses(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, ): Observable<AxiosResponse<ModH5pactivityGetH5pactivitiesByCourses200Response>>;
    public modH5pactivityGetH5pactivitiesByCourses(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, ): Observable<any> {

        if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest === null || modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest was null or undefined when calling modH5pactivityGetH5pactivitiesByCourses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModH5pactivityGetH5pactivitiesByCourses200Response>(`${this.basePath}/mod_h5pactivity_get_h5pactivities_by_courses`,
            modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return access information for a given h5p activity.
     * Return access information for a given h5p activity.
     * @param modH5pactivityGetH5pactivityAccessInformationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modH5pactivityGetH5pactivityAccessInformation(modH5pactivityGetH5pactivityAccessInformationRequest: ModH5pactivityGetH5pactivityAccessInformationRequest, ): Observable<AxiosResponse<ModH5pactivityGetH5pactivityAccessInformation200Response>>;
    public modH5pactivityGetH5pactivityAccessInformation(modH5pactivityGetH5pactivityAccessInformationRequest: ModH5pactivityGetH5pactivityAccessInformationRequest, ): Observable<any> {

        if (modH5pactivityGetH5pactivityAccessInformationRequest === null || modH5pactivityGetH5pactivityAccessInformationRequest === undefined) {
            throw new Error('Required parameter modH5pactivityGetH5pactivityAccessInformationRequest was null or undefined when calling modH5pactivityGetH5pactivityAccessInformation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModH5pactivityGetH5pactivityAccessInformation200Response>(`${this.basePath}/mod_h5pactivity_get_h5pactivity_access_information`,
            modH5pactivityGetH5pactivityAccessInformationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the information needed to list a user attempt results.
     * Return the information needed to list a user attempt results.
     * @param modH5pactivityGetResultsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modH5pactivityGetResults(modH5pactivityGetResultsRequest: ModH5pactivityGetResultsRequest, ): Observable<AxiosResponse<ModH5pactivityGetResults200Response>>;
    public modH5pactivityGetResults(modH5pactivityGetResultsRequest: ModH5pactivityGetResultsRequest, ): Observable<any> {

        if (modH5pactivityGetResultsRequest === null || modH5pactivityGetResultsRequest === undefined) {
            throw new Error('Required parameter modH5pactivityGetResultsRequest was null or undefined when calling modH5pactivityGetResults.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModH5pactivityGetResults200Response>(`${this.basePath}/mod_h5pactivity_get_results`,
            modH5pactivityGetResultsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Return the information needed to list all enrolled user attempts.
     * Return the information needed to list all enrolled user attempts.
     * @param modH5pactivityGetUserAttemptsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modH5pactivityGetUserAttempts(modH5pactivityGetUserAttemptsRequest: ModH5pactivityGetUserAttemptsRequest, ): Observable<AxiosResponse<ModH5pactivityGetUserAttempts200Response>>;
    public modH5pactivityGetUserAttempts(modH5pactivityGetUserAttemptsRequest: ModH5pactivityGetUserAttemptsRequest, ): Observable<any> {

        if (modH5pactivityGetUserAttemptsRequest === null || modH5pactivityGetUserAttemptsRequest === undefined) {
            throw new Error('Required parameter modH5pactivityGetUserAttemptsRequest was null or undefined when calling modH5pactivityGetUserAttempts.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<ModH5pactivityGetUserAttempts200Response>(`${this.basePath}/mod_h5pactivity_get_user_attempts`,
            modH5pactivityGetUserAttemptsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Log that the h5pactivity was viewed.
     * Log that the h5pactivity was viewed.
     * @param modH5pactivityLogReportViewedRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modH5pactivityLogReportViewed(modH5pactivityLogReportViewedRequest: ModH5pactivityLogReportViewedRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modH5pactivityLogReportViewed(modH5pactivityLogReportViewedRequest: ModH5pactivityLogReportViewedRequest, ): Observable<any> {

        if (modH5pactivityLogReportViewedRequest === null || modH5pactivityLogReportViewedRequest === undefined) {
            throw new Error('Required parameter modH5pactivityLogReportViewedRequest was null or undefined when calling modH5pactivityLogReportViewed.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_h5pactivity_log_report_viewed`,
            modH5pactivityLogReportViewedRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modH5pactivityViewH5pactivityRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modH5pactivityViewH5pactivity(modH5pactivityViewH5pactivityRequest: ModH5pactivityViewH5pactivityRequest, ): Observable<AxiosResponse<CoreCalendarDeleteSubscription200Response>>;
    public modH5pactivityViewH5pactivity(modH5pactivityViewH5pactivityRequest: ModH5pactivityViewH5pactivityRequest, ): Observable<any> {

        if (modH5pactivityViewH5pactivityRequest === null || modH5pactivityViewH5pactivityRequest === undefined) {
            throw new Error('Required parameter modH5pactivityViewH5pactivityRequest was null or undefined when calling modH5pactivityViewH5pactivity.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (apiKey) required
        if (this.configuration.apiKeys?.["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<CoreCalendarDeleteSubscription200Response>(`${this.basePath}/mod_h5pactivity_view_h5pactivity`,
            modH5pactivityViewH5pactivityRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
