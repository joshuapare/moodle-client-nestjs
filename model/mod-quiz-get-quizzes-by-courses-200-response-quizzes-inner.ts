/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner } from './core-block-get-dashboard-blocks-200-response-blocks-inner-contents-files-inner';


export interface ModQuizGetQuizzesByCourses200ResponseQuizzesInner { 
    /**
     * Whether to allow the quiz to be attempted                                                                             offline in the mobile app
     */
    Allowofflineattempts?: number;
    /**
     * Whether subsequent attempts start from the answer                                                                     to the previous attempt (1) or start blank (0).
     */
    Attemptonlast?: number;
    /**
     * The maximum number of attempts a student is allowed.
     */
    Attempts?: number;
    /**
     * Auto-save delay
     */
    Autosaveperiod?: number;
    /**
     * Restriciton on the browser the student must                                                                     use. E.g. \'securewindow\'.
     */
    Browsersecurity?: string;
    /**
     * Allows students to redo any completed question                                                                         within a quiz attempt.
     */
    Canredoquestions?: number;
    /**
     * Mark quiz complete when the student has                                                                                 exhausted the maximum number of attempts
     */
    Completionattemptsexhausted?: number;
    /**
     * Whether to require passing grade
     */
    Completionpass?: number;
    /**
     * Course id
     */
    Course?: number;
    /**
     * Course module id
     */
    Coursemodule?: number;
    /**
     * Number of decimal points to use when displaying                                                                     grades.
     */
    Decimalpoints?: number;
    /**
     * Delay that must be left between the first and second attempt,                                                             in seconds.
     */
    Delay1?: number;
    /**
     * Delay that must be left between the second and subsequent                                                             attempt, in seconds.
     */
    Delay2?: number;
    /**
     * The amount of time (in seconds) after the time limit                                                                 runs out during which attempts can still be submitted,                                                                 if overduehandling is set to allow it.
     */
    Graceperiod?: number;
    /**
     * The total that the quiz overall grade is scaled to be                                                             out of.
     */
    Grade?: number;
    /**
     * One of the values QUIZ_GRADEHIGHEST, QUIZ_GRADEAVERAGE,                                                                     QUIZ_ATTEMPTFIRST or QUIZ_ATTEMPTLAST.
     */
    Grademethod?: number;
    /**
     * Group id
     */
    Groupingid?: number;
    /**
     * Group mode
     */
    Groupmode?: number;
    /**
     * Whether the quiz has any non-blank feedback text
     */
    Hasfeedback?: number;
    /**
     * Whether the quiz has questions
     */
    Hasquestions?: number;
    /**
     * Activity instance id
     */
    Id?: number;
    /**
     * Activity introduction
     */
    Intro?: string;
    Introfiles?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     */
    Introformat?: number;
    /**
     * Forced activity language
     */
    Lang?: string;
    /**
     * Activity name
     */
    Name?: string;
    /**
     * Any constraints on how the user is allowed to navigate                                                                 around the quiz. Currently recognised values are                                                                 \'free\' and \'seq\'.
     */
    Navmethod?: string;
    /**
     * The method used to handle overdue attempts.                                                                     \'autosubmit\', \'graceperiod\' or \'autoabandon\'.
     */
    Overduehandling?: string;
    /**
     * A password that the student must enter before starting or                                                                 continuing a quiz attempt.
     */
    Password?: string;
    /**
     * The behaviour to ask questions to use.
     */
    Preferredbehaviour?: string;
    /**
     * Number of decimal points to use when                                                                             displaying question grades.                                                                             (-1 means use decimalpoints.)
     */
    Questiondecimalpoints?: number;
    /**
     * How often to insert a page break when editing                                                                         the quiz, or when shuffling the question order.
     */
    Questionsperpage?: number;
    /**
     * Whether users are allowed to review their quiz                                                                     attempts at various times. This is a bit field, decoded by the                                                                     \\mod_quiz\\question\\display_options class. It is formed by ORing                                                                     together the constants defined there.
     */
    Reviewattempt?: number;
    /**
     * Whether users are allowed to review their quiz                                                        attempts at various times.A bit field, like reviewattempt.
     */
    Reviewcorrectness?: number;
    /**
     * Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.
     */
    Reviewgeneralfeedback?: number;
    /**
     * Whether users are allowed to review their quiz attempts                                                                 at various times. A bit field, like reviewattempt.
     */
    Reviewmarks?: number;
    /**
     * Whether users are allowed to review their quiz                                                   attempts at various times. A bit field, like reviewattempt.
     */
    Reviewmaxmarks?: number;
    /**
     * Whether users are allowed to review their quiz                                                                             attempts at various times. A bit field, like                                                                             reviewattempt.
     */
    Reviewoverallfeedback?: number;
    /**
     * Whether users are allowed to review their quiz                                                                         attempts at various times. A bit field, like                                                                         reviewattempt.
     */
    Reviewrightanswer?: number;
    /**
     * Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.
     */
    Reviewspecificfeedback?: number;
    /**
     * Course section id
     */
    Section?: number;
    /**
     * Whether blocks should be shown on the attempt.php and                                                                 review.php pages.
     */
    Showblocks?: number;
    /**
     * Option to show the user\'s picture during the                                                                     attempt and on the review page.
     */
    Showuserpicture?: number;
    /**
     * Whether the parts of the question should be shuffled,                                                                     in those question types that support it.
     */
    Shuffleanswers?: number;
    /**
     * Used to restrict the IP addresses from which this quiz can                                                             be attempted. The format is as requried by the address_in_subnet                                                             function.
     */
    Subnet?: string;
    /**
     * The total of all the question instance maxmarks.
     */
    Sumgrades?: number;
    /**
     * The time when this quiz closes. (0 = no restriction.)
     */
    Timeclose?: number;
    /**
     * The time when the quiz was added to the course.
     */
    Timecreated?: number;
    /**
     * The time limit for quiz attempts, in seconds.
     */
    Timelimit?: number;
    /**
     * Last modified time.
     */
    Timemodified?: number;
    /**
     * The time when this quiz opens. (0 = no restriction.)
     */
    Timeopen?: number;
    /**
     * Visible
     */
    Visible?: boolean;
}

